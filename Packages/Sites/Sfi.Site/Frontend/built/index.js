function stickInParent(e){var t=function(e){var t="isFixed";e=e||".js-stickInParent";var n=document.querySelector(e);if(!n)return null;var i=n.parentElement;return function(e){e>i.offsetTop&&window.innerWidth>640?n.classList.add(t):n.classList.remove(t)}}(e);t&&debouncedScroll(t)}function debouncedScroll(e){var t=0,n=!1;window.addEventListener("scroll",function(i){t=window.scrollY,n||window.requestAnimationFrame(function(){e(t),n=!1}),n=!0})}!function(e,t){if("object"==typeof exports&&"object"==typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var n=t();for(var i in n)("object"==typeof exports?exports:e)[i]=n[i]}}(this,function(){return function(e){function t(i){if(n[i])return n[i].exports;var o=n[i]={exports:{},id:i,loaded:!1};return e[i].call(o.exports,o,o.exports,t),o.loaded=!0,o.exports}var n={};return t.m=e,t.c=n,t.p="",t(0)}([function(e,t,n){e.exports=n(1)},function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function o(e,t){function n(e,t){var n=z,i=n.classNameActiveSlide;e.forEach(function(e,t){e.classList.contains(i)&&e.classList.remove(i)}),e[t].classList.add(i)}function i(e){var t=z,n=t.infinite,i=e.slice(0,n),o=e.slice(e.length-n,e.length);return i.forEach(function(e){var t=e.cloneNode(!0);k.appendChild(t)}),o.reverse().forEach(function(e){var t=e.cloneNode(!0);k.insertBefore(t,k.firstChild)}),k.addEventListener(O.transitionEnd,E),f.call(k.children)}function o(t,n,i){(0,l["default"])(e,t+".lory."+n,i)}function s(e,t,n){var i=k&&k.style;i&&(i[O.transition+"TimingFunction"]=n,i[O.transition+"Duration"]=t+"ms",O.hasTranslate3d?i[O.transform]="translate3d("+e+"px, 0, 0)":i[O.transform]="translate("+e+"px, 0)")}function d(e,t){var i=z,r=i.slideSpeed,a=i.slidesToScroll,d=i.infinite,l=i.rewind,c=i.rewindSpeed,u=i.ease,v=i.classNameActiveSlide,m=r,h=t?A+1:A-1,p=Math.round(S-j);o("before","slide",{index:A,nextSlide:h}),"number"!=typeof e&&(e=t?A+a:A-a),e=Math.min(Math.max(e,0),M.length-1),d&&void 0===t&&(e+=d);var y=Math.min(Math.max(M[e].offsetLeft*-1,p*-1),0);l&&Math.abs(g.x)===p&&t&&(y=0,e=0,m=c),s(y,m,u),g.x=y,M[e].offsetLeft<=p&&(A=e),!d||e!==M.length-d&&0!==e||(t&&(A=d),t||(A=M.length-2*d),g.x=M[A].offsetLeft*-1,P=function(){s(M[A].offsetLeft*-1,0,void 0)}),v&&n(f.call(M),A),o("after","slide",{currentSlide:A})}function c(){o("before","init"),O=(0,a["default"])(),z=r({},u["default"],t);var s=z,d=s.classNameFrame,l=s.classNameSlideContainer,c=s.classNamePrevCtrl,m=s.classNameNextCtrl,h=s.enableMouseEvents,L=s.classNameActiveSlide;_=e.getElementsByClassName(d)[0],k=_.getElementsByClassName(l)[0],B=e.getElementsByClassName(c)[0],T=e.getElementsByClassName(m)[0],g={x:k.offsetLeft,y:k.offsetTop},M=z.infinite?i(f.call(k.children)):f.call(k.children),v(),L&&n(M,A),B&&T&&(B.addEventListener("click",p),T.addEventListener("click",y)),_.addEventListener("touchstart",b),h&&(_.addEventListener("mousedown",b),_.addEventListener("click",w)),z.window.addEventListener("resize",C),o("after","init")}function v(){var e=z,t=e.infinite,i=e.ease,o=e.rewindSpeed,r=e.rewindOnResize,a=e.classNameActiveSlide;S=k.getBoundingClientRect().width||k.offsetWidth,j=_.getBoundingClientRect().width||_.offsetWidth,j===S&&(S=M.reduce(function(e,t){return e+t.getBoundingClientRect().width||t.offsetWidth},0)),r?A=0:(i=null,o=0),t?(s(M[A+t].offsetLeft*-1,0,null),A+=t,g.x=M[A].offsetLeft*-1):(s(M[A].offsetLeft*-1,o,i),g.x=M[A].offsetLeft*-1),a&&n(f.call(M),A)}function m(e){d(e)}function h(){return A-z.infinite||0}function p(){d(!1,!1)}function y(){d(!1,!0)}function L(){o("before","destroy"),_.removeEventListener(O.transitionEnd,E),_.removeEventListener("touchstart",b),_.removeEventListener("touchmove",x),_.removeEventListener("touchend",N),_.removeEventListener("mousemove",x),_.removeEventListener("mousedown",b),_.removeEventListener("mouseup",N),_.removeEventListener("mouseleave",N),_.removeEventListener("click",w),z.window.removeEventListener("resize",C),B&&B.removeEventListener("click",p),T&&T.removeEventListener("click",y),z.infinite&&Array.apply(null,Array(z.infinite)).forEach(function(){k.removeChild(k.firstChild),k.removeChild(k.lastChild)}),o("after","destroy")}function E(){P&&(P(),P=void 0)}function b(e){var t=z,n=t.enableMouseEvents,i=e.touches?e.touches[0]:e;n&&(_.addEventListener("mousemove",x),_.addEventListener("mouseup",N),_.addEventListener("mouseleave",N)),_.addEventListener("touchmove",x),_.addEventListener("touchend",N);var r=i.pageX,s=i.pageY;D={x:r,y:s,time:Date.now()},q=void 0,F={},o("on","touchstart",{event:e})}function x(e){var t=e.touches?e.touches[0]:e,n=t.pageX,i=t.pageY;F={x:n-D.x,y:i-D.y},"undefined"==typeof q&&(q=!!(q||Math.abs(F.x)<Math.abs(F.y))),!q&&D&&(e.preventDefault(),s(g.x+F.x,0,null)),o("on","touchmove",{event:e})}function N(e){var t=D?Date.now()-D.time:void 0,n=Number(t)<300&&Math.abs(F.x)>25||Math.abs(F.x)>j/3,i=!A&&F.x>0||A===M.length-1&&F.x<0,r=F.x<0;q||(n&&!i?d(!1,r):s(g.x,z.snapBackSpeed)),D=void 0,_.removeEventListener("touchmove",x),_.removeEventListener("touchend",N),_.removeEventListener("mousemove",x),_.removeEventListener("mouseup",N),_.removeEventListener("mouseleave",N),o("on","touchend",{event:e})}function w(e){F.x&&e.preventDefault()}function C(e){v(),o("on","resize",{event:e})}var g=void 0,S=void 0,j=void 0,M=void 0,_=void 0,k=void 0,B=void 0,T=void 0,O=void 0,P=void 0,A=0,z={};"undefined"!=typeof jQuery&&e instanceof jQuery&&(e=e[0]);var D=void 0,F=void 0,q=void 0;return c(),{setup:c,reset:v,slideTo:m,returnIndex:h,prev:p,next:y,destroy:L}}Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var i in n)Object.prototype.hasOwnProperty.call(n,i)&&(e[i]=n[i])}return e};t.lory=o;var s=n(2),a=i(s),d=n(3),l=i(d),c=n(5),u=i(c),f=Array.prototype.slice},function(e,t){(function(e){"use strict";function n(){var t=void 0,n=void 0,i=void 0,o=void 0;return function(){var r=document.createElement("_"),s=r.style,a=void 0;""===s[a="webkitTransition"]&&(i="webkitTransitionEnd",n=a),""===s[a="transition"]&&(i="transitionend",n=a),""===s[a="webkitTransform"]&&(t=a),""===s[a="msTransform"]&&(t=a),""===s[a="transform"]&&(t=a),document.body.insertBefore(r,null),s[t]="translate3d(0, 0, 0)",o=!!e.getComputedStyle(r).getPropertyValue(t),document.body.removeChild(r)}(),{transform:t,transition:n,transitionEnd:i,hasTranslate3d:o}}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=n}).call(t,function(){return this}())},function(e,t,n){"use strict";function i(e){return e&&e.__esModule?e:{"default":e}}function o(e,t,n){var i=new s["default"](t,{bubbles:!0,cancelable:!0,detail:n});e.dispatchEvent(i)}Object.defineProperty(t,"__esModule",{value:!0}),t["default"]=o;var r=n(4),s=i(r)},function(e,t){(function(t){function n(){try{var e=new i("cat",{detail:{foo:"bar"}});return"cat"===e.type&&"bar"===e.detail.foo}catch(t){}return!1}var i=t.CustomEvent;e.exports=n()?i:"function"==typeof document.createEvent?function(e,t){var n=document.createEvent("CustomEvent");return t?n.initCustomEvent(e,t.bubbles,t.cancelable,t.detail):n.initCustomEvent(e,!1,!1,void 0),n}:function(e,t){var n=document.createEventObject();return n.type=e,t?(n.bubbles=Boolean(t.bubbles),n.cancelable=Boolean(t.cancelable),n.detail=t.detail):(n.bubbles=!1,n.cancelable=!1,n.detail=void 0),n}}).call(t,function(){return this}())},function(e,t){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t["default"]={slidesToScroll:1,slideSpeed:300,rewindSpeed:600,snapBackSpeed:200,ease:"ease",rewind:!1,infinite:!1,classNameFrame:"js_frame",classNameSlideContainer:"js_slides",classNamePrevCtrl:"js_prev",classNameNextCtrl:"js_next",classNameActiveSlide:"active",enableMouseEvents:!1,window:window,rewindOnResize:!0}}])}),document.addEventListener("DOMContentLoaded",function(){function e(e){if("before.lory.init"===e.type){for(var t=0,s=n;t<s;t++){var a=o.cloneNode();i.appendChild(a)}i.childNodes[0].classList.add("active")}if("after.lory.init"===e.type)for(var t=0,s=n;t<s;t++)i.childNodes[t].addEventListener("click",function(e){r.slideTo(Array.prototype.indexOf.call(i.childNodes,e.target))});if("after.lory.slide"===e.type){for(var t=0,s=i.childNodes.length;t<s;t++)i.childNodes[t].classList.remove("active");i.childNodes[e.detail.currentSlide-1].classList.add("active")}if("on.lory.resize"===e.type){for(var t=0,s=i.childNodes.length;t<s;t++)i.childNodes[t].classList.remove("active");i.childNodes[0].classList.add("active")}}var t=document.querySelector(".js-Lory");if(t){var n=t.querySelectorAll(".js-Lory-slide").length,i=t.querySelector(".js-Lory-dots"),o=document.createElement("li");o.classList.add("Lory-dot"),t.addEventListener("before.lory.init",e),t.addEventListener("after.lory.init",e),t.addEventListener("after.lory.slide",e),t.addEventListener("on.lory.resize",e);var r=lory(t,{infinite:1,enableMouseEvents:!0,classNameFrame:"js-Lory-frame",classNameSlideContainer:"js-Lory-slides",classNamePrevCtrl:"js-Lory-prev",classNameNextCtrl:"js-Lory-next"})}}),stickInParent();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIl9zdGlja0luUGFyZW50LmpzIiwibG9yeS5qcyIsIl9sb3J5LmpzIiwibWFpbi5qcyJdLCJuYW1lcyI6WyJzdGlja0luUGFyZW50Iiwic2VsZWN0b3IiLCJ1cGRhdGUiLCJmaXhlZENsYXNzIiwibmF2IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwicGFyZW50IiwicGFyZW50RWxlbWVudCIsInNjcm9sbFBvc2l0aW9uIiwib2Zmc2V0VG9wIiwid2luZG93IiwiaW5uZXJXaWR0aCIsImNsYXNzTGlzdCIsImFkZCIsInJlbW92ZSIsImRlYm91bmNlZFNjcm9sbCIsImNhbGxiYWNrIiwibGFzdEtub3duU2Nyb2xsUG9zaXRpb24iLCJpc1RpY2tpbmciLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsInNjcm9sbFkiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJyb290IiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJhIiwiaSIsInRoaXMiLCJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImlkIiwibG9hZGVkIiwiY2FsbCIsIm0iLCJjIiwicCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImxvcnkiLCJzbGlkZXIiLCJvcHRzIiwic2V0QWN0aXZlRWxlbWVudCIsInNsaWRlcyIsImN1cnJlbnRJbmRleCIsIl9vcHRpb25zIiwib3B0aW9ucyIsImNsYXNzTmFtZUFjdGl2ZVNsaWRlIiwiZm9yRWFjaCIsImVsZW1lbnQiLCJpbmRleCIsImNvbnRhaW5zIiwic2V0dXBJbmZpbml0ZSIsInNsaWRlQXJyYXkiLCJfb3B0aW9uczIiLCJpbmZpbml0ZSIsImZyb250Iiwic2xpY2UiLCJiYWNrIiwibGVuZ3RoIiwiY2xvbmVkIiwiY2xvbmVOb2RlIiwic2xpZGVDb250YWluZXIiLCJhcHBlbmRDaGlsZCIsInJldmVyc2UiLCJpbnNlcnRCZWZvcmUiLCJmaXJzdENoaWxkIiwicHJlZml4ZXMiLCJ0cmFuc2l0aW9uRW5kIiwib25UcmFuc2l0aW9uRW5kIiwiY2hpbGRyZW4iLCJkaXNwYXRjaFNsaWRlckV2ZW50IiwicGhhc2UiLCJ0eXBlIiwiZGV0YWlsIiwiX2Rpc3BhdGNoRXZlbnQyIiwidHJhbnNsYXRlIiwidG8iLCJkdXJhdGlvbiIsImVhc2UiLCJzdHlsZSIsInRyYW5zaXRpb24iLCJoYXNUcmFuc2xhdGUzZCIsInRyYW5zZm9ybSIsInNsaWRlIiwibmV4dEluZGV4IiwiZGlyZWN0aW9uIiwiX29wdGlvbnMzIiwic2xpZGVTcGVlZCIsInNsaWRlc1RvU2Nyb2xsIiwicmV3aW5kIiwicmV3aW5kU3BlZWQiLCJuZXh0U2xpZGUiLCJtYXhPZmZzZXQiLCJNYXRoIiwicm91bmQiLCJzbGlkZXNXaWR0aCIsImZyYW1lV2lkdGgiLCJtaW4iLCJtYXgiLCJ1bmRlZmluZWQiLCJuZXh0T2Zmc2V0Iiwib2Zmc2V0TGVmdCIsImFicyIsInBvc2l0aW9uIiwieCIsInRyYW5zaXRpb25FbmRDYWxsYmFjayIsImN1cnJlbnRTbGlkZSIsInNldHVwIiwiX2RldGVjdFByZWZpeGVzMiIsIl9leHRlbmRzIiwiX2RlZmF1bHRzMiIsIl9vcHRpb25zNCIsImNsYXNzTmFtZUZyYW1lIiwiY2xhc3NOYW1lU2xpZGVDb250YWluZXIiLCJjbGFzc05hbWVQcmV2Q3RybCIsImNsYXNzTmFtZU5leHRDdHJsIiwiZW5hYmxlTW91c2VFdmVudHMiLCJmcmFtZSIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJwcmV2Q3RybCIsIm5leHRDdHJsIiwieSIsInJlc2V0IiwicHJldiIsIm5leHQiLCJvblRvdWNoc3RhcnQiLCJvbkNsaWNrIiwib25SZXNpemUiLCJfb3B0aW9uczUiLCJyZXdpbmRPblJlc2l6ZSIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIndpZHRoIiwib2Zmc2V0V2lkdGgiLCJyZWR1Y2UiLCJwcmV2aW91c1ZhbHVlIiwic2xpZGVUbyIsInJldHVybkluZGV4IiwiZGVzdHJveSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJvblRvdWNobW92ZSIsIm9uVG91Y2hlbmQiLCJBcnJheSIsImFwcGx5IiwicmVtb3ZlQ2hpbGQiLCJsYXN0Q2hpbGQiLCJldmVudCIsIl9vcHRpb25zNiIsInRvdWNoZXMiLCJwYWdlWCIsInBhZ2VZIiwidG91Y2hPZmZzZXQiLCJ0aW1lIiwiRGF0ZSIsIm5vdyIsImlzU2Nyb2xsaW5nIiwiZGVsdGEiLCJwcmV2ZW50RGVmYXVsdCIsImlzVmFsaWQiLCJOdW1iZXIiLCJpc091dE9mQm91bmRzIiwic25hcEJhY2tTcGVlZCIsImpRdWVyeSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJhc3NpZ24iLCJ0YXJnZXQiLCJhcmd1bWVudHMiLCJzb3VyY2UiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsIl9kZXRlY3RQcmVmaXhlcyIsIl9kaXNwYXRjaEV2ZW50IiwiX2RlZmF1bHRzIiwiZ2xvYmFsIiwiZGV0ZWN0UHJlZml4ZXMiLCJlbCIsImNyZWF0ZUVsZW1lbnQiLCJwcm9wIiwiYm9keSIsImdldENvbXB1dGVkU3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwiZGlzcGF0Y2hFdmVudCIsIl9jdXN0b21FdmVudDIiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsIl9jdXN0b21FdmVudCIsInVzZU5hdGl2ZSIsIk5hdGl2ZUN1c3RvbUV2ZW50IiwiZm9vIiwiQ3VzdG9tRXZlbnQiLCJjcmVhdGVFdmVudCIsInBhcmFtcyIsImluaXRDdXN0b21FdmVudCIsImNyZWF0ZUV2ZW50T2JqZWN0IiwiQm9vbGVhbiIsImhhbmRsZURvdEV2ZW50IiwibGVuIiwiZG90Q291bnQiLCJjbG9uZSIsImRvdExpc3RJdGVtIiwiZG90Q29udGFpbmVyIiwiY2hpbGROb2RlcyIsImxvcnlJbnN0YW5jZSIsImluZGV4T2YiLCJsb3J5RG9tIiwicXVlcnlTZWxlY3RvckFsbCJdLCJtYXBwaW5ncyI6IkFBQUEsUUFBQUEsZUFBQUMsR0FDQSxHQUFBQyxHQUFBLFNBQUFELEdBQ0EsR0FBQUUsR0FBQSxTQUNBRixHQUFBQSxHQUFBLG1CQUNBLElBQUFHLEdBQUFDLFNBQUFDLGNBQUFMLEVBQ0EsS0FBQUcsRUFDQSxNQUFBLEtBRUEsSUFBQUcsR0FBQUgsRUFBQUksYUFFQSxPQUFBLFVBQUFDLEdBRUFBLEVBQUFGLEVBQUFHLFdBQUFDLE9BQUFDLFdBQUEsSUFDQVIsRUFBQVMsVUFBQUMsSUFBQVgsR0FFQUMsRUFBQVMsVUFBQUUsT0FBQVosS0FHQUYsRUFDQUMsSUFDQWMsZ0JBQUFkLEdBSUEsUUFBQWMsaUJBQUFDLEdBQ0EsR0FBQUMsR0FBQSxFQUNBQyxHQUFBLENBRUFSLFFBQUFTLGlCQUFBLFNBQUEsU0FBQUMsR0FDQUgsRUFBQVAsT0FBQVcsUUFDQUgsR0FDQVIsT0FBQVksc0JBQUEsV0FDQU4sRUFBQUMsR0FDQUMsR0FBQSxJQUdBQSxHQUFBLEtDcENBLFNBQUFLLEVBQUFDLEdBQ0EsR0FBQSxnQkFBQUMsVUFBQSxnQkFBQUMsUUFDQUEsT0FBQUQsUUFBQUQsUUFDQSxJQUFBLGtCQUFBRyxTQUFBQSxPQUFBQyxJQUNBRCxVQUFBSCxPQUNBLENBQ0EsR0FBQUssR0FBQUwsR0FDQSxLQUFBLEdBQUFNLEtBQUFELElBQUEsZ0JBQUFKLFNBQUFBLFFBQUFGLEdBQUFPLEdBQUFELEVBQUFDLEtBRUFDLEtBQUEsV0FDQSxNQUFBLFVBQUFDLEdBS0EsUUFBQUMsR0FBQUMsR0FHQSxHQUFBQyxFQUFBRCxHQUNBLE1BQUFDLEdBQUFELEdBQUFULE9BR0EsSUFBQUMsR0FBQVMsRUFBQUQsSUFDQVQsV0FDQVcsR0FBQUYsRUFDQUcsUUFBQSxFQVVBLE9BTkFMLEdBQUFFLEdBQUFJLEtBQUFaLEVBQUFELFFBQUFDLEVBQUFBLEVBQUFELFFBQUFRLEdBR0FQLEVBQUFXLFFBQUEsRUFHQVgsRUFBQUQsUUF2QkEsR0FBQVUsS0FxQ0EsT0FUQUYsR0FBQU0sRUFBQVAsRUFHQUMsRUFBQU8sRUFBQUwsRUFHQUYsRUFBQVEsRUFBQSxHQUdBUixFQUFBLEtBS0EsU0FBQVAsRUFBQUQsRUFBQVEsR0FFQVAsRUFBQUQsUUFBQVEsRUFBQSxJQUtBLFNBQUFQLEVBQUFELEVBQUFRLEdBRUEsWUFzQkEsU0FBQVMsR0FBQUMsR0FBQSxNQUFBQSxJQUFBQSxFQUFBQyxXQUFBRCxHQUFBRSxVQUFBRixHQUlBLFFBQUFHLEdBQUFDLEVBQUFDLEdBOEJBLFFBQUFDLEdBQUFDLEVBQUFDLEdBQ0EsR0FBQUMsR0FBQUMsRUFDQUMsRUFBQUYsRUFBQUUsb0JBR0FKLEdBQUFLLFFBQUEsU0FBQUMsRUFBQUMsR0FDQUQsRUFBQTVDLFVBQUE4QyxTQUFBSixJQUNBRSxFQUFBNUMsVUFBQUUsT0FBQXdDLEtBSUFKLEVBQUFDLEdBQUF2QyxVQUFBQyxJQUFBeUMsR0FVQSxRQUFBSyxHQUFBQyxHQUNBLEdBQUFDLEdBQUFSLEVBQ0FTLEVBQUFELEVBQUFDLFNBR0FDLEVBQUFILEVBQUFJLE1BQUEsRUFBQUYsR0FDQUcsRUFBQUwsRUFBQUksTUFBQUosRUFBQU0sT0FBQUosRUFBQUYsRUFBQU0sT0FnQkEsT0FkQUgsR0FBQVIsUUFBQSxTQUFBQyxHQUNBLEdBQUFXLEdBQUFYLEVBQUFZLFdBQUEsRUFFQUMsR0FBQUMsWUFBQUgsS0FHQUYsRUFBQU0sVUFBQWhCLFFBQUEsU0FBQUMsR0FDQSxHQUFBVyxHQUFBWCxFQUFBWSxXQUFBLEVBRUFDLEdBQUFHLGFBQUFMLEVBQUFFLEVBQUFJLGNBR0FKLEVBQUFsRCxpQkFBQXVELEVBQUFDLGNBQUFDLEdBRUFaLEVBQUExQixLQUFBK0IsRUFBQVEsVUFPQSxRQUFBQyxHQUFBQyxFQUFBQyxFQUFBQyxJQUNBLEVBQUFDLEVBQUFBLFlBQUFuQyxFQUFBZ0MsRUFBQSxTQUFBQyxFQUFBQyxHQVVBLFFBQUFFLEdBQUFDLEVBQUFDLEVBQUFDLEdBQ0EsR0FBQUMsR0FBQWxCLEdBQUFBLEVBQUFrQixLQUVBQSxLQUNBQSxFQUFBYixFQUFBYyxXQUFBLGtCQUFBRixFQUNBQyxFQUFBYixFQUFBYyxXQUFBLFlBQUFILEVBQUEsS0FFQVgsRUFBQWUsZUFDQUYsRUFBQWIsRUFBQWdCLFdBQUEsZUFBQU4sRUFBQSxZQUVBRyxFQUFBYixFQUFBZ0IsV0FBQSxhQUFBTixFQUFBLFVBYUEsUUFBQU8sR0FBQUMsRUFBQUMsR0FDQSxHQUFBQyxHQUFBekMsRUFDQTBDLEVBQUFELEVBQUFDLFdBQ0FDLEVBQUFGLEVBQUFFLGVBQ0FsQyxFQUFBZ0MsRUFBQWhDLFNBQ0FtQyxFQUFBSCxFQUFBRyxPQUNBQyxFQUFBSixFQUFBSSxZQUNBWixFQUFBUSxFQUFBUixLQUNBaEMsRUFBQXdDLEVBQUF4QyxxQkFHQStCLEVBQUFVLEVBRUFJLEVBQUFOLEVBQUFwQyxFQUFBLEVBQUFBLEVBQUEsRUFDQTJDLEVBQUFDLEtBQUFDLE1BQUFDLEVBQUFDLEVBRUExQixHQUFBLFNBQUEsU0FDQXJCLE1BQUFBLEVBQ0EwQyxVQUFBQSxJQUdBLGdCQUFBUCxLQUVBQSxFQURBQyxFQUNBcEMsRUFBQXVDLEVBRUF2QyxFQUFBdUMsR0FJQUosRUFBQVMsS0FBQUksSUFBQUosS0FBQUssSUFBQWQsRUFBQSxHQUFBMUMsRUFBQWdCLE9BQUEsR0FFQUosR0FBQTZDLFNBQUFkLElBQ0FELEdBQUE5QixFQUdBLElBQUE4QyxHQUFBUCxLQUFBSSxJQUFBSixLQUFBSyxJQUFBeEQsRUFBQTBDLEdBQUFpQixjQUFBVCxNQUFBLEVBRUFILElBQUFJLEtBQUFTLElBQUFDLEVBQUFDLEtBQUFaLEdBQUFQLElBQ0FlLEVBQUEsRUFDQWhCLEVBQUEsRUFDQVAsRUFBQWEsR0FNQWYsRUFBQXlCLEVBQUF2QixFQUFBQyxHQUtBeUIsRUFBQUMsRUFBQUosRUFNQTFELEVBQUEwQyxHQUFBaUIsWUFBQVQsSUFDQTNDLEVBQUFtQyxJQUdBOUIsR0FBQThCLElBQUExQyxFQUFBZ0IsT0FBQUosR0FBQSxJQUFBOEIsSUFDQUMsSUFDQXBDLEVBQUFLLEdBR0ErQixJQUNBcEMsRUFBQVAsRUFBQWdCLE9BQUEsRUFBQUosR0FHQWlELEVBQUFDLEVBQUE5RCxFQUFBTyxHQUFBb0QsY0FFQUksRUFBQSxXQUNBOUIsRUFBQWpDLEVBQUFPLEdBQUFvRCxjQUFBLEVBQUFGLFVBSUFyRCxHQUNBTCxFQUFBZSxFQUFBMUIsS0FBQVksR0FBQU8sR0FHQXFCLEVBQUEsUUFBQSxTQUNBb0MsYUFBQXpELElBUUEsUUFBQTBELEtBQ0FyQyxFQUFBLFNBQUEsUUFFQUosR0FBQSxFQUFBMEMsRUFBQUEsY0FDQS9ELEVBQUFnRSxLQUFBQyxFQUFBQSxXQUFBdEUsRUFFQSxJQUFBdUUsR0FBQWxFLEVBQ0FtRSxFQUFBRCxFQUFBQyxlQUNBQyxFQUFBRixFQUFBRSx3QkFDQUMsRUFBQUgsRUFBQUcsa0JBQ0FDLEVBQUFKLEVBQUFJLGtCQUNBQyxFQUFBTCxFQUFBSyxrQkFDQXRFLEVBQUFpRSxFQUFBakUsb0JBR0F1RSxHQUFBOUUsRUFBQStFLHVCQUFBTixHQUFBLEdBQ0FuRCxFQUFBd0QsRUFBQUMsdUJBQUFMLEdBQUEsR0FDQU0sRUFBQWhGLEVBQUErRSx1QkFBQUosR0FBQSxHQUNBTSxFQUFBakYsRUFBQStFLHVCQUFBSCxHQUFBLEdBRUFaLEdBQ0FDLEVBQUEzQyxFQUFBd0MsV0FDQW9CLEVBQUE1RCxFQUFBNUQsV0FJQXlDLEVBREFHLEVBQUFTLFNBQ0FILEVBQUFLLEVBQUExQixLQUFBK0IsRUFBQVEsV0FFQWIsRUFBQTFCLEtBQUErQixFQUFBUSxVQUdBcUQsSUFFQTVFLEdBQ0FMLEVBQUFDLEVBQUFPLEdBR0FzRSxHQUFBQyxJQUNBRCxFQUFBNUcsaUJBQUEsUUFBQWdILEdBQ0FILEVBQUE3RyxpQkFBQSxRQUFBaUgsSUFHQVAsRUFBQTFHLGlCQUFBLGFBQUFrSCxHQUVBVCxJQUNBQyxFQUFBMUcsaUJBQUEsWUFBQWtILEdBQ0FSLEVBQUExRyxpQkFBQSxRQUFBbUgsSUFHQWpGLEVBQUEzQyxPQUFBUyxpQkFBQSxTQUFBb0gsR0FFQXpELEVBQUEsUUFBQSxRQU9BLFFBQUFvRCxLQUNBLEdBQUFNLEdBQUFuRixFQUNBUyxFQUFBMEUsRUFBQTFFLFNBQ0F3QixFQUFBa0QsRUFBQWxELEtBQ0FZLEVBQUFzQyxFQUFBdEMsWUFDQXVDLEVBQUFELEVBQUFDLGVBQ0FuRixFQUFBa0YsRUFBQWxGLG9CQUdBaUQsR0FBQWxDLEVBQUFxRSx3QkFBQUMsT0FBQXRFLEVBQUF1RSxZQUNBcEMsRUFBQXFCLEVBQUFhLHdCQUFBQyxPQUFBZCxFQUFBZSxZQUVBcEMsSUFBQUQsSUFDQUEsRUFBQXJELEVBQUEyRixPQUFBLFNBQUFDLEVBQUFuRCxHQUNBLE1BQUFtRCxHQUFBbkQsRUFBQStDLHdCQUFBQyxPQUFBaEQsRUFBQWlELGFBQ0EsSUFHQUgsRUFDQWhGLEVBQUEsR0FFQTZCLEVBQUEsS0FDQVksRUFBQSxHQUdBcEMsR0FDQXFCLEVBQUFqQyxFQUFBTyxFQUFBSyxHQUFBK0MsY0FBQSxFQUFBLE1BRUFwRCxHQUFBSyxFQUNBaUQsRUFBQUMsRUFBQTlELEVBQUFPLEdBQUFvRCxnQkFFQTFCLEVBQUFqQyxFQUFBTyxHQUFBb0QsY0FBQVgsRUFBQVosR0FDQXlCLEVBQUFDLEVBQUE5RCxFQUFBTyxHQUFBb0QsZUFHQXZELEdBQ0FMLEVBQUFlLEVBQUExQixLQUFBWSxHQUFBTyxHQVFBLFFBQUFzRixHQUFBdEYsR0FDQWtDLEVBQUFsQyxHQU9BLFFBQUF1RixLQUNBLE1BQUF2RixHQUFBSixFQUFBUyxVQUFBLEVBT0EsUUFBQXFFLEtBQ0F4QyxHQUFBLEdBQUEsR0FPQSxRQUFBeUMsS0FDQXpDLEdBQUEsR0FBQSxHQU9BLFFBQUFzRCxLQUNBbkUsRUFBQSxTQUFBLFdBR0ErQyxFQUFBcUIsb0JBQUF4RSxFQUFBQyxjQUFBQyxHQUNBaUQsRUFBQXFCLG9CQUFBLGFBQUFiLEdBQ0FSLEVBQUFxQixvQkFBQSxZQUFBQyxHQUNBdEIsRUFBQXFCLG9CQUFBLFdBQUFFLEdBQ0F2QixFQUFBcUIsb0JBQUEsWUFBQUMsR0FDQXRCLEVBQUFxQixvQkFBQSxZQUFBYixHQUNBUixFQUFBcUIsb0JBQUEsVUFBQUUsR0FDQXZCLEVBQUFxQixvQkFBQSxhQUFBRSxHQUNBdkIsRUFBQXFCLG9CQUFBLFFBQUFaLEdBRUFqRixFQUFBM0MsT0FBQXdJLG9CQUFBLFNBQUFYLEdBRUFSLEdBQ0FBLEVBQUFtQixvQkFBQSxRQUFBZixHQUdBSCxHQUNBQSxFQUFBa0Isb0JBQUEsUUFBQWQsR0FJQS9FLEVBQUFTLFVBQ0F1RixNQUFBQyxNQUFBLEtBQUFELE1BQUFoRyxFQUFBUyxXQUFBUCxRQUFBLFdBQ0FjLEVBQUFrRixZQUFBbEYsRUFBQUksWUFDQUosRUFBQWtGLFlBQUFsRixFQUFBbUYsYUFJQTFFLEVBQUEsUUFBQSxXQVNBLFFBQUFGLEtBQ0FxQyxJQUNBQSxJQUVBQSxFQUFBTixRQUlBLFFBQUEwQixHQUFBb0IsR0FDQSxHQUFBQyxHQUFBckcsRUFDQXVFLEVBQUE4QixFQUFBOUIsa0JBRUErQixFQUFBRixFQUFBRSxRQUFBRixFQUFBRSxRQUFBLEdBQUFGLENBRUE3QixLQUNBQyxFQUFBMUcsaUJBQUEsWUFBQWdJLEdBQ0F0QixFQUFBMUcsaUJBQUEsVUFBQWlJLEdBQ0F2QixFQUFBMUcsaUJBQUEsYUFBQWlJLElBR0F2QixFQUFBMUcsaUJBQUEsWUFBQWdJLEdBQ0F0QixFQUFBMUcsaUJBQUEsV0FBQWlJLEVBRUEsSUFBQVEsR0FBQUQsRUFBQUMsTUFDQUMsRUFBQUYsRUFBQUUsS0FHQUMsSUFDQTlDLEVBQUE0QyxFQUNBM0IsRUFBQTRCLEVBQ0FFLEtBQUFDLEtBQUFDLE9BR0FDLEVBQUF2RCxPQUVBd0QsS0FFQXJGLEVBQUEsS0FBQSxjQUNBMkUsTUFBQUEsSUFJQSxRQUFBTixHQUFBTSxHQUNBLEdBQUFFLEdBQUFGLEVBQUFFLFFBQUFGLEVBQUFFLFFBQUEsR0FBQUYsRUFDQUcsRUFBQUQsRUFBQUMsTUFDQUMsRUFBQUYsRUFBQUUsS0FHQU0sSUFDQW5ELEVBQUE0QyxFQUFBRSxFQUFBOUMsRUFDQWlCLEVBQUE0QixFQUFBQyxFQUFBN0IsR0FHQSxtQkFBQWlDLEtBQ0FBLEtBQUFBLEdBQUE3RCxLQUFBUyxJQUFBcUQsRUFBQW5ELEdBQUFYLEtBQUFTLElBQUFxRCxFQUFBbEMsTUFHQWlDLEdBQUFKLElBQ0FMLEVBQUFXLGlCQUNBakYsRUFBQTRCLEVBQUFDLEVBQUFtRCxFQUFBbkQsRUFBQSxFQUFBLE9BSUFsQyxFQUFBLEtBQUEsYUFDQTJFLE1BQUFBLElBSUEsUUFBQUwsR0FBQUssR0FLQSxHQUFBcEUsR0FBQXlFLEVBQUFFLEtBQUFDLE1BQUFILEVBQUFDLEtBQUFwRCxPQWFBMEQsRUFBQUMsT0FBQWpGLEdBQUEsS0FBQWdCLEtBQUFTLElBQUFxRCxFQUFBbkQsR0FBQSxJQUFBWCxLQUFBUyxJQUFBcUQsRUFBQW5ELEdBQUFSLEVBQUEsRUFXQStELEdBQUE5RyxHQUFBMEcsRUFBQW5ELEVBQUEsR0FBQXZELElBQUFQLEVBQUFnQixPQUFBLEdBQUFpRyxFQUFBbkQsRUFBQSxFQUVBbkIsRUFBQXNFLEVBQUFuRCxFQUFBLENBRUFrRCxLQUNBRyxJQUFBRSxFQUNBNUUsR0FBQSxFQUFBRSxHQUVBVixFQUFBNEIsRUFBQUMsRUFBQTNELEVBQUFtSCxnQkFJQVYsRUFBQW5ELE9BS0FrQixFQUFBcUIsb0JBQUEsWUFBQUMsR0FDQXRCLEVBQUFxQixvQkFBQSxXQUFBRSxHQUNBdkIsRUFBQXFCLG9CQUFBLFlBQUFDLEdBQ0F0QixFQUFBcUIsb0JBQUEsVUFBQUUsR0FDQXZCLEVBQUFxQixvQkFBQSxhQUFBRSxHQUVBdEUsRUFBQSxLQUFBLFlBQ0EyRSxNQUFBQSxJQUlBLFFBQUFuQixHQUFBbUIsR0FDQVUsRUFBQW5ELEdBQ0F5QyxFQUFBVyxpQkFJQSxRQUFBN0IsR0FBQWtCLEdBQ0F2QixJQUVBcEQsRUFBQSxLQUFBLFVBQ0EyRSxNQUFBQSxJQWpnQkEsR0FBQTFDLEdBQUEsT0FDQVIsRUFBQSxPQUNBQyxFQUFBLE9BQ0F0RCxFQUFBLE9BS0EyRSxFQUFBLE9BQ0F4RCxFQUFBLE9BQ0EwRCxFQUFBLE9BQ0FDLEVBQUEsT0FDQXRELEVBQUEsT0FDQXVDLEVBQUEsT0FFQXhELEVBQUEsRUFDQUosSUFLQSxvQkFBQW9ILFNBQUExSCxZQUFBMEgsVUFDQTFILEVBQUFBLEVBQUEsR0FnV0EsSUFBQStHLEdBQUEsT0FDQUssRUFBQSxPQUNBRCxFQUFBLE1BaUpBLE9BSEEvQyxNQUlBQSxNQUFBQSxFQUNBZSxNQUFBQSxFQUNBYSxRQUFBQSxFQUNBQyxZQUFBQSxFQUNBYixLQUFBQSxFQUNBQyxLQUFBQSxFQUNBYSxRQUFBQSxHQXppQkF5QixPQUFBQyxlQUFBbEosRUFBQSxjQUNBbUosT0FBQSxHQUdBLElBQUF2RCxHQUFBcUQsT0FBQUcsUUFBQSxTQUFBQyxHQUFBLElBQUEsR0FBQWhKLEdBQUEsRUFBQUEsRUFBQWlKLFVBQUE3RyxPQUFBcEMsSUFBQSxDQUFBLEdBQUFrSixHQUFBRCxVQUFBakosRUFBQSxLQUFBLEdBQUFtSixLQUFBRCxHQUFBTixPQUFBUSxVQUFBQyxlQUFBN0ksS0FBQTBJLEVBQUFDLEtBQUFILEVBQUFHLEdBQUFELEVBQUFDLElBQUEsTUFBQUgsR0FFQXJKLEdBQUFxQixLQUFBQSxDQUVBLElBQUFzSSxHQUFBbkosRUFBQSxHQUVBbUYsRUFBQTFFLEVBQUEwSSxHQUVBQyxFQUFBcEosRUFBQSxHQUVBaUQsRUFBQXhDLEVBQUEySSxHQUVBQyxFQUFBckosRUFBQSxHQUVBcUYsRUFBQTVFLEVBQUE0SSxHQUlBdEgsRUFBQXFGLE1BQUE2QixVQUFBbEgsT0F5aEJBLFNBQUF0QyxFQUFBRCxJQUVBLFNBQUE4SixHQUFBLFlBU0EsU0FBQUMsS0FDQSxHQUFBOUYsR0FBQSxPQUNBRixFQUFBLE9BQ0FiLEVBQUEsT0FDQWMsRUFBQSxNQW9DQSxPQWxDQSxZQUNBLEdBQUFnRyxHQUFBckwsU0FBQXNMLGNBQUEsS0FDQW5HLEVBQUFrRyxFQUFBbEcsTUFFQW9HLEVBQUEsTUFFQSxNQUFBcEcsRUFBQW9HLEVBQUEsc0JBQ0FoSCxFQUFBLHNCQUNBYSxFQUFBbUcsR0FHQSxLQUFBcEcsRUFBQW9HLEVBQUEsZ0JBQ0FoSCxFQUFBLGdCQUNBYSxFQUFBbUcsR0FHQSxLQUFBcEcsRUFBQW9HLEVBQUEscUJBQ0FqRyxFQUFBaUcsR0FHQSxLQUFBcEcsRUFBQW9HLEVBQUEsaUJBQ0FqRyxFQUFBaUcsR0FHQSxLQUFBcEcsRUFBQW9HLEVBQUEsZUFDQWpHLEVBQUFpRyxHQUdBdkwsU0FBQXdMLEtBQUFwSCxhQUFBaUgsRUFBQSxNQUNBbEcsRUFBQUcsR0FBQSx1QkFDQUQsSUFBQThGLEVBQUFNLGlCQUFBSixHQUFBSyxpQkFBQXBHLEdBQ0F0RixTQUFBd0wsS0FBQXJDLFlBQUFrQyxPQUlBL0YsVUFBQUEsRUFDQUYsV0FBQUEsRUFDQWIsY0FBQUEsRUFDQWMsZUFBQUEsR0FuREFpRixPQUFBQyxlQUFBbEosRUFBQSxjQUNBbUosT0FBQSxJQUVBbkosRUFBQUEsV0FBQStKLElBbURBbEosS0FBQWIsRUFBQSxXQUFBLE1BQUFNLFdBSUEsU0FBQUwsRUFBQUQsRUFBQVEsR0FFQSxZQVdBLFNBQUFTLEdBQUFDLEdBQUEsTUFBQUEsSUFBQUEsRUFBQUMsV0FBQUQsR0FBQUUsVUFBQUYsR0FTQSxRQUFBb0osR0FBQWpCLEVBQUE5RixFQUFBQyxHQUNBLEdBQUF3RSxHQUFBLEdBQUF1QyxHQUFBQSxXQUFBaEgsR0FDQWlILFNBQUEsRUFDQUMsWUFBQSxFQUNBakgsT0FBQUEsR0FHQTZGLEdBQUFpQixjQUFBdEMsR0F6QkFpQixPQUFBQyxlQUFBbEosRUFBQSxjQUNBbUosT0FBQSxJQUVBbkosRUFBQUEsV0FBQXNLLENBRUEsSUFBQUksR0FBQWxLLEVBQUEsR0FFQStKLEVBQUF0SixFQUFBeUosSUF1QkEsU0FBQXpLLEVBQUFELElBRUEsU0FBQThKLEdBR0EsUUFBQWEsS0FDQSxJQUNBLEdBQUEzSixHQUFBLEdBQUE0SixHQUFBLE9BQUFwSCxRQUFBcUgsSUFBQSxRQUNBLE9BQUEsUUFBQTdKLEVBQUF1QyxNQUFBLFFBQUF2QyxFQUFBd0MsT0FBQXFILElBQ0EsTUFBQWxMLElBRUEsT0FBQSxFQVJBLEdBQUFpTCxHQUFBZCxFQUFBZ0IsV0FtQkE3SyxHQUFBRCxRQUFBMkssSUFBQUMsRUFHQSxrQkFBQWpNLFVBQUFvTSxZQUFBLFNBQUF4SCxFQUFBeUgsR0FDQSxHQUFBckwsR0FBQWhCLFNBQUFvTSxZQUFBLGNBTUEsT0FMQUMsR0FDQXJMLEVBQUFzTCxnQkFBQTFILEVBQUF5SCxFQUFBUixRQUFBUSxFQUFBUCxXQUFBTyxFQUFBeEgsUUFFQTdELEVBQUFzTCxnQkFBQTFILEdBQUEsR0FBQSxFQUFBLFFBRUE1RCxHQUlBLFNBQUE0RCxFQUFBeUgsR0FDQSxHQUFBckwsR0FBQWhCLFNBQUF1TSxtQkFXQSxPQVZBdkwsR0FBQTRELEtBQUFBLEVBQ0F5SCxHQUNBckwsRUFBQTZLLFFBQUFXLFFBQUFILEVBQUFSLFNBQ0E3SyxFQUFBOEssV0FBQVUsUUFBQUgsRUFBQVAsWUFDQTlLLEVBQUE2RCxPQUFBd0gsRUFBQXhILFNBRUE3RCxFQUFBNkssU0FBQSxFQUNBN0ssRUFBQThLLFlBQUEsRUFDQTlLLEVBQUE2RCxPQUFBLFFBRUE3RCxLQUdBa0IsS0FBQWIsRUFBQSxXQUFBLE1BQUFNLFdBSUEsU0FBQUwsRUFBQUQsR0FFQSxZQUVBaUosUUFBQUMsZUFBQWxKLEVBQUEsY0FDQW1KLE9BQUEsSUFFQW5KLEVBQUFBLFlBS0F1RSxlQUFBLEVBTUFELFdBQUEsSUFNQUcsWUFBQSxJQU1Bc0UsY0FBQSxJQU9BbEYsS0FBQSxPQU9BVyxRQUFBLEVBT0FuQyxVQUFBLEVBTUEwRCxlQUFBLFdBTUFDLHdCQUFBLFlBTUFDLGtCQUFBLFVBTUFDLGtCQUFBLFVBT0FyRSxxQkFBQSxTQU1Bc0UsbUJBQUEsRUFNQWxILE9BQUFBLE9BTUErSCxnQkFBQSxRQzMyQkFySSxTQUFBZSxpQkFBQSxtQkFBQSxXQXdCQSxRQUFBMEwsR0FBQXpMLEdBQ0EsR0FBQSxxQkFBQUEsRUFBQTRELEtBQUEsQ0FDQSxJQUFBLEdBQUFsRCxHQUFBLEVBQUFnTCxFQUFBQyxFQUFBakwsRUFBQWdMLEVBQUFoTCxJQUFBLENBQ0EsR0FBQWtMLEdBQUFDLEVBQUE3SSxXQUNBOEksR0FBQTVJLFlBQUEwSSxHQUVBRSxFQUFBQyxXQUFBLEdBQUF2TSxVQUFBQyxJQUFBLFVBRUEsR0FBQSxvQkFBQU8sRUFBQTRELEtBQ0EsSUFBQSxHQUFBbEQsR0FBQSxFQUFBZ0wsRUFBQUMsRUFBQWpMLEVBQUFnTCxFQUFBaEwsSUFDQW9MLEVBQUFDLFdBQUFyTCxHQUFBWCxpQkFBQSxRQUFBLFNBQUFDLEdBQ0FnTSxFQUFBckUsUUFBQU0sTUFBQTZCLFVBQUFtQyxRQUFBL0ssS0FBQTRLLEVBQUFDLFdBQUEvTCxFQUFBMEosVUFJQSxJQUFBLHFCQUFBMUosRUFBQTRELEtBQUEsQ0FDQSxJQUFBLEdBQUFsRCxHQUFBLEVBQUFnTCxFQUFBSSxFQUFBQyxXQUFBakosT0FBQXBDLEVBQUFnTCxFQUFBaEwsSUFDQW9MLEVBQUFDLFdBQUFyTCxHQUFBbEIsVUFBQUUsT0FBQSxTQUVBb00sR0FBQUMsV0FBQS9MLEVBQUE2RCxPQUFBaUMsYUFBQSxHQUFBdEcsVUFBQUMsSUFBQSxVQUVBLEdBQUEsbUJBQUFPLEVBQUE0RCxLQUFBLENBQ0EsSUFBQSxHQUFBbEQsR0FBQSxFQUFBZ0wsRUFBQUksRUFBQUMsV0FBQWpKLE9BQUFwQyxFQUFBZ0wsRUFBQWhMLElBQ0FvTCxFQUFBQyxXQUFBckwsR0FBQWxCLFVBQUFFLE9BQUEsU0FFQW9NLEdBQUFDLFdBQUEsR0FBQXZNLFVBQUFDLElBQUEsV0FoREEsR0FBQXlNLEdBQUFsTixTQUFBQyxjQUFBLFdBQ0EsSUFBQWlOLEVBQUEsQ0FDQSxHQUFBUCxHQUFBTyxFQUFBQyxpQkFBQSxrQkFBQXJKLE9BQ0FnSixFQUFBSSxFQUFBak4sY0FBQSxpQkFDQTRNLEVBQUE3TSxTQUFBc0wsY0FBQSxLQUNBdUIsR0FBQXJNLFVBQUFDLElBQUEsWUFFQXlNLEVBQUFuTSxpQkFBQSxtQkFBQTBMLEdBQ0FTLEVBQUFuTSxpQkFBQSxrQkFBQTBMLEdBQ0FTLEVBQUFuTSxpQkFBQSxtQkFBQTBMLEdBQ0FTLEVBQUFuTSxpQkFBQSxpQkFBQTBMLEVBRUEsSUFBQU8sR0FBQXRLLEtBQUF3SyxHQUNBeEosU0FBQSxFQUNBOEQsbUJBQUEsRUFDQUosZUFBQSxnQkFDQUMsd0JBQUEsaUJBQ0FDLGtCQUFBLGVBQ0FDLGtCQUFBLG9CQ25CQTVIIiwiZmlsZSI6ImluZGV4LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gc3RpY2tJblBhcmVudCAoc2VsZWN0b3IpIHtcblx0dmFyIHVwZGF0ZSA9IChmdW5jdGlvbiAoc2VsZWN0b3IpIHtcblx0XHR2YXIgZml4ZWRDbGFzcyA9ICdpc0ZpeGVkJztcblx0XHRzZWxlY3RvciA9IHNlbGVjdG9yIHx8ICcuanMtc3RpY2tJblBhcmVudCc7XG5cdFx0dmFyIG5hdiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuXHRcdGlmICghbmF2KSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0dmFyIHBhcmVudCA9IG5hdi5wYXJlbnRFbGVtZW50O1xuXG5cdFx0cmV0dXJuIGZ1bmN0aW9uIChzY3JvbGxQb3NpdGlvbikge1xuXHRcdFx0Ly8gVE9ETzogZGlydHkgaGFjayBmb3IgbW9iaWxlXG5cdFx0XHRpZiAoc2Nyb2xsUG9zaXRpb24gPiBwYXJlbnQub2Zmc2V0VG9wICYmIHdpbmRvdy5pbm5lcldpZHRoID4gNjQwKSB7XG5cdFx0XHRcdG5hdi5jbGFzc0xpc3QuYWRkKGZpeGVkQ2xhc3MpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bmF2LmNsYXNzTGlzdC5yZW1vdmUoZml4ZWRDbGFzcyk7XG5cdFx0XHR9XG5cdFx0fTtcblx0fSkoc2VsZWN0b3IpO1xuXHRpZiAodXBkYXRlKSB7XG5cdFx0ZGVib3VuY2VkU2Nyb2xsKHVwZGF0ZSk7XG5cdH1cbn1cblxuZnVuY3Rpb24gZGVib3VuY2VkU2Nyb2xsKGNhbGxiYWNrKSB7XG5cdHZhciBsYXN0S25vd25TY3JvbGxQb3NpdGlvbiA9IDA7XG5cdHZhciBpc1RpY2tpbmcgPSBmYWxzZTtcblxuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgZnVuY3Rpb24oZSkge1xuXHRcdGxhc3RLbm93blNjcm9sbFBvc2l0aW9uID0gd2luZG93LnNjcm9sbFk7XG5cdFx0aWYgKCFpc1RpY2tpbmcpIHtcblx0XHRcdHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGNhbGxiYWNrKGxhc3RLbm93blNjcm9sbFBvc2l0aW9uKTtcblx0XHRcdFx0aXNUaWNraW5nID0gZmFsc2U7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0aXNUaWNraW5nID0gdHJ1ZTtcblx0fSk7XG59XG4iLCIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShbXSwgZmFjdG9yeSk7XG5cdGVsc2Uge1xuXHRcdHZhciBhID0gZmFjdG9yeSgpO1xuXHRcdGZvcih2YXIgaSBpbiBhKSAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnID8gZXhwb3J0cyA6IHJvb3QpW2ldID0gYVtpXTtcblx0fVxufSkodGhpcywgZnVuY3Rpb24oKSB7XG5yZXR1cm4gLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKVxuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge30sXG4vKioqKioqLyBcdFx0XHRpZDogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsb2FkZWQ6IGZhbHNlXG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubG9hZGVkID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbi8qKioqKiovIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oMCk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cblxuLyoqKi8gfSxcbi8qIDEgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyAvKiBnbG9iYWxzIGpRdWVyeSAqL1xuXHRcblx0ZXhwb3J0cy5sb3J5ID0gbG9yeTtcblx0XG5cdHZhciBfZGV0ZWN0UHJlZml4ZXMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXHRcblx0dmFyIF9kZXRlY3RQcmVmaXhlczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kZXRlY3RQcmVmaXhlcyk7XG5cdFxuXHR2YXIgX2Rpc3BhdGNoRXZlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXHRcblx0dmFyIF9kaXNwYXRjaEV2ZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2Rpc3BhdGNoRXZlbnQpO1xuXHRcblx0dmFyIF9kZWZhdWx0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cdFxuXHR2YXIgX2RlZmF1bHRzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZmF1bHRzKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG5cdFxuXHRmdW5jdGlvbiBsb3J5KHNsaWRlciwgb3B0cykge1xuXHQgICAgdmFyIHBvc2l0aW9uID0gdm9pZCAwO1xuXHQgICAgdmFyIHNsaWRlc1dpZHRoID0gdm9pZCAwO1xuXHQgICAgdmFyIGZyYW1lV2lkdGggPSB2b2lkIDA7XG5cdCAgICB2YXIgc2xpZGVzID0gdm9pZCAwO1xuXHRcblx0ICAgIC8qKlxuXHQgICAgICogc2xpZGVyIERPTSBlbGVtZW50c1xuXHQgICAgICovXG5cdCAgICB2YXIgZnJhbWUgPSB2b2lkIDA7XG5cdCAgICB2YXIgc2xpZGVDb250YWluZXIgPSB2b2lkIDA7XG5cdCAgICB2YXIgcHJldkN0cmwgPSB2b2lkIDA7XG5cdCAgICB2YXIgbmV4dEN0cmwgPSB2b2lkIDA7XG5cdCAgICB2YXIgcHJlZml4ZXMgPSB2b2lkIDA7XG5cdCAgICB2YXIgdHJhbnNpdGlvbkVuZENhbGxiYWNrID0gdm9pZCAwO1xuXHRcblx0ICAgIHZhciBpbmRleCA9IDA7XG5cdCAgICB2YXIgb3B0aW9ucyA9IHt9O1xuXHRcblx0ICAgIC8qKlxuXHQgICAgICogaWYgb2JqZWN0IGlzIGpRdWVyeSBjb252ZXJ0IHRvIG5hdGl2ZSBET00gZWxlbWVudFxuXHQgICAgICovXG5cdCAgICBpZiAodHlwZW9mIGpRdWVyeSAhPT0gJ3VuZGVmaW5lZCcgJiYgc2xpZGVyIGluc3RhbmNlb2YgalF1ZXJ5KSB7XG5cdCAgICAgICAgc2xpZGVyID0gc2xpZGVyWzBdO1xuXHQgICAgfVxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogcHJpdmF0ZVxuXHQgICAgICogc2V0IGFjdGl2ZSBjbGFzcyB0byBlbGVtZW50IHdoaWNoIGlzIHRoZSBjdXJyZW50IHNsaWRlXG5cdCAgICAgKi9cblx0ICAgIGZ1bmN0aW9uIHNldEFjdGl2ZUVsZW1lbnQoc2xpZGVzLCBjdXJyZW50SW5kZXgpIHtcblx0ICAgICAgICB2YXIgX29wdGlvbnMgPSBvcHRpb25zO1xuXHQgICAgICAgIHZhciBjbGFzc05hbWVBY3RpdmVTbGlkZSA9IF9vcHRpb25zLmNsYXNzTmFtZUFjdGl2ZVNsaWRlO1xuXHRcblx0XG5cdCAgICAgICAgc2xpZGVzLmZvckVhY2goZnVuY3Rpb24gKGVsZW1lbnQsIGluZGV4KSB7XG5cdCAgICAgICAgICAgIGlmIChlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWVBY3RpdmVTbGlkZSkpIHtcblx0ICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWVBY3RpdmVTbGlkZSk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgc2xpZGVzW2N1cnJlbnRJbmRleF0uY2xhc3NMaXN0LmFkZChjbGFzc05hbWVBY3RpdmVTbGlkZSk7XG5cdCAgICB9XG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBwcml2YXRlXG5cdCAgICAgKiBzZXR1cEluZmluaXRlOiBmdW5jdGlvbiB0byBzZXR1cCBpZiBpbmZpbml0ZSBpcyBzZXRcblx0ICAgICAqXG5cdCAgICAgKiBAcGFyYW0gIHthcnJheX0gc2xpZGVBcnJheVxuXHQgICAgICogQHJldHVybiB7YXJyYXl9IGFycmF5IG9mIHVwZGF0ZWQgc2xpZGVDb250YWluZXIgZWxlbWVudHNcblx0ICAgICAqL1xuXHQgICAgZnVuY3Rpb24gc2V0dXBJbmZpbml0ZShzbGlkZUFycmF5KSB7XG5cdCAgICAgICAgdmFyIF9vcHRpb25zMiA9IG9wdGlvbnM7XG5cdCAgICAgICAgdmFyIGluZmluaXRlID0gX29wdGlvbnMyLmluZmluaXRlO1xuXHRcblx0XG5cdCAgICAgICAgdmFyIGZyb250ID0gc2xpZGVBcnJheS5zbGljZSgwLCBpbmZpbml0ZSk7XG5cdCAgICAgICAgdmFyIGJhY2sgPSBzbGlkZUFycmF5LnNsaWNlKHNsaWRlQXJyYXkubGVuZ3RoIC0gaW5maW5pdGUsIHNsaWRlQXJyYXkubGVuZ3RoKTtcblx0XG5cdCAgICAgICAgZnJvbnQuZm9yRWFjaChmdW5jdGlvbiAoZWxlbWVudCkge1xuXHQgICAgICAgICAgICB2YXIgY2xvbmVkID0gZWxlbWVudC5jbG9uZU5vZGUodHJ1ZSk7XG5cdFxuXHQgICAgICAgICAgICBzbGlkZUNvbnRhaW5lci5hcHBlbmRDaGlsZChjbG9uZWQpO1xuXHQgICAgICAgIH0pO1xuXHRcblx0ICAgICAgICBiYWNrLnJldmVyc2UoKS5mb3JFYWNoKGZ1bmN0aW9uIChlbGVtZW50KSB7XG5cdCAgICAgICAgICAgIHZhciBjbG9uZWQgPSBlbGVtZW50LmNsb25lTm9kZSh0cnVlKTtcblx0XG5cdCAgICAgICAgICAgIHNsaWRlQ29udGFpbmVyLmluc2VydEJlZm9yZShjbG9uZWQsIHNsaWRlQ29udGFpbmVyLmZpcnN0Q2hpbGQpO1xuXHQgICAgICAgIH0pO1xuXHRcblx0ICAgICAgICBzbGlkZUNvbnRhaW5lci5hZGRFdmVudExpc3RlbmVyKHByZWZpeGVzLnRyYW5zaXRpb25FbmQsIG9uVHJhbnNpdGlvbkVuZCk7XG5cdFxuXHQgICAgICAgIHJldHVybiBzbGljZS5jYWxsKHNsaWRlQ29udGFpbmVyLmNoaWxkcmVuKTtcblx0ICAgIH1cblx0XG5cdCAgICAvKipcblx0ICAgICAqIFtkaXNwYXRjaFNsaWRlckV2ZW50IGRlc2NyaXB0aW9uXVxuXHQgICAgICogQHJldHVybiB7W3R5cGVdfSBbZGVzY3JpcHRpb25dXG5cdCAgICAgKi9cblx0ICAgIGZ1bmN0aW9uIGRpc3BhdGNoU2xpZGVyRXZlbnQocGhhc2UsIHR5cGUsIGRldGFpbCkge1xuXHQgICAgICAgICgwLCBfZGlzcGF0Y2hFdmVudDIuZGVmYXVsdCkoc2xpZGVyLCBwaGFzZSArICcubG9yeS4nICsgdHlwZSwgZGV0YWlsKTtcblx0ICAgIH1cblx0XG5cdCAgICAvKipcblx0ICAgICAqIHRyYW5zbGF0ZXMgdG8gYSBnaXZlbiBwb3NpdGlvbiBpbiBhIGdpdmVuIHRpbWUgaW4gbWlsbGlzZWNvbmRzXG5cdCAgICAgKlxuXHQgICAgICogQHRvICAgICAgICB7bnVtYmVyfSBudW1iZXIgaW4gcGl4ZWxzIHdoZXJlIHRvIHRyYW5zbGF0ZSB0b1xuXHQgICAgICogQGR1cmF0aW9uICB7bnVtYmVyfSB0aW1lIGluIG1pbGxpc2Vjb25kcyBmb3IgdGhlIHRyYW5zaXN0aW9uXG5cdCAgICAgKiBAZWFzZSAgICAgIHtzdHJpbmd9IGVhc2luZyBjc3MgcHJvcGVydHlcblx0ICAgICAqL1xuXHQgICAgZnVuY3Rpb24gdHJhbnNsYXRlKHRvLCBkdXJhdGlvbiwgZWFzZSkge1xuXHQgICAgICAgIHZhciBzdHlsZSA9IHNsaWRlQ29udGFpbmVyICYmIHNsaWRlQ29udGFpbmVyLnN0eWxlO1xuXHRcblx0ICAgICAgICBpZiAoc3R5bGUpIHtcblx0ICAgICAgICAgICAgc3R5bGVbcHJlZml4ZXMudHJhbnNpdGlvbiArICdUaW1pbmdGdW5jdGlvbiddID0gZWFzZTtcblx0ICAgICAgICAgICAgc3R5bGVbcHJlZml4ZXMudHJhbnNpdGlvbiArICdEdXJhdGlvbiddID0gZHVyYXRpb24gKyAnbXMnO1xuXHRcblx0ICAgICAgICAgICAgaWYgKHByZWZpeGVzLmhhc1RyYW5zbGF0ZTNkKSB7XG5cdCAgICAgICAgICAgICAgICBzdHlsZVtwcmVmaXhlcy50cmFuc2Zvcm1dID0gJ3RyYW5zbGF0ZTNkKCcgKyB0byArICdweCwgMCwgMCknO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgc3R5bGVbcHJlZml4ZXMudHJhbnNmb3JtXSA9ICd0cmFuc2xhdGUoJyArIHRvICsgJ3B4LCAwKSc7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBzbGlkZWZ1bmN0aW9uIGNhbGxlZCBieSBwcmV2LCBuZXh0ICYgdG91Y2hlbmRcblx0ICAgICAqXG5cdCAgICAgKiBkZXRlcm1pbmUgbmV4dEluZGV4IGFuZCBzbGlkZSB0byBuZXh0IHBvc3Rpb25cblx0ICAgICAqIHVuZGVyIHJlc3RyaWN0aW9ucyBvZiB0aGUgZGVmaW5lZCBvcHRpb25zXG5cdCAgICAgKlxuXHQgICAgICogQGRpcmVjdGlvbiAge2Jvb2xlYW59XG5cdCAgICAgKi9cblx0ICAgIGZ1bmN0aW9uIHNsaWRlKG5leHRJbmRleCwgZGlyZWN0aW9uKSB7XG5cdCAgICAgICAgdmFyIF9vcHRpb25zMyA9IG9wdGlvbnM7XG5cdCAgICAgICAgdmFyIHNsaWRlU3BlZWQgPSBfb3B0aW9uczMuc2xpZGVTcGVlZDtcblx0ICAgICAgICB2YXIgc2xpZGVzVG9TY3JvbGwgPSBfb3B0aW9uczMuc2xpZGVzVG9TY3JvbGw7XG5cdCAgICAgICAgdmFyIGluZmluaXRlID0gX29wdGlvbnMzLmluZmluaXRlO1xuXHQgICAgICAgIHZhciByZXdpbmQgPSBfb3B0aW9uczMucmV3aW5kO1xuXHQgICAgICAgIHZhciByZXdpbmRTcGVlZCA9IF9vcHRpb25zMy5yZXdpbmRTcGVlZDtcblx0ICAgICAgICB2YXIgZWFzZSA9IF9vcHRpb25zMy5lYXNlO1xuXHQgICAgICAgIHZhciBjbGFzc05hbWVBY3RpdmVTbGlkZSA9IF9vcHRpb25zMy5jbGFzc05hbWVBY3RpdmVTbGlkZTtcblx0XG5cdFxuXHQgICAgICAgIHZhciBkdXJhdGlvbiA9IHNsaWRlU3BlZWQ7XG5cdFxuXHQgICAgICAgIHZhciBuZXh0U2xpZGUgPSBkaXJlY3Rpb24gPyBpbmRleCArIDEgOiBpbmRleCAtIDE7XG5cdCAgICAgICAgdmFyIG1heE9mZnNldCA9IE1hdGgucm91bmQoc2xpZGVzV2lkdGggLSBmcmFtZVdpZHRoKTtcblx0XG5cdCAgICAgICAgZGlzcGF0Y2hTbGlkZXJFdmVudCgnYmVmb3JlJywgJ3NsaWRlJywge1xuXHQgICAgICAgICAgICBpbmRleDogaW5kZXgsXG5cdCAgICAgICAgICAgIG5leHRTbGlkZTogbmV4dFNsaWRlXG5cdCAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgIGlmICh0eXBlb2YgbmV4dEluZGV4ICE9PSAnbnVtYmVyJykge1xuXHQgICAgICAgICAgICBpZiAoZGlyZWN0aW9uKSB7XG5cdCAgICAgICAgICAgICAgICBuZXh0SW5kZXggPSBpbmRleCArIHNsaWRlc1RvU2Nyb2xsO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgICAgbmV4dEluZGV4ID0gaW5kZXggLSBzbGlkZXNUb1Njcm9sbDtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgbmV4dEluZGV4ID0gTWF0aC5taW4oTWF0aC5tYXgobmV4dEluZGV4LCAwKSwgc2xpZGVzLmxlbmd0aCAtIDEpO1xuXHRcblx0ICAgICAgICBpZiAoaW5maW5pdGUgJiYgZGlyZWN0aW9uID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICAgICAgbmV4dEluZGV4ICs9IGluZmluaXRlO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgdmFyIG5leHRPZmZzZXQgPSBNYXRoLm1pbihNYXRoLm1heChzbGlkZXNbbmV4dEluZGV4XS5vZmZzZXRMZWZ0ICogLTEsIG1heE9mZnNldCAqIC0xKSwgMCk7XG5cdFxuXHQgICAgICAgIGlmIChyZXdpbmQgJiYgTWF0aC5hYnMocG9zaXRpb24ueCkgPT09IG1heE9mZnNldCAmJiBkaXJlY3Rpb24pIHtcblx0ICAgICAgICAgICAgbmV4dE9mZnNldCA9IDA7XG5cdCAgICAgICAgICAgIG5leHRJbmRleCA9IDA7XG5cdCAgICAgICAgICAgIGR1cmF0aW9uID0gcmV3aW5kU3BlZWQ7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvKipcblx0ICAgICAgICAgKiB0cmFuc2xhdGUgdG8gdGhlIG5leHRPZmZzZXQgYnkgYSBkZWZpbmVkIGR1cmF0aW9uIGFuZCBlYXNlIGZ1bmN0aW9uXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgdHJhbnNsYXRlKG5leHRPZmZzZXQsIGR1cmF0aW9uLCBlYXNlKTtcblx0XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogdXBkYXRlIHRoZSBwb3NpdGlvbiB3aXRoIHRoZSBuZXh0IHBvc2l0aW9uXG5cdCAgICAgICAgICovXG5cdCAgICAgICAgcG9zaXRpb24ueCA9IG5leHRPZmZzZXQ7XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIHVwZGF0ZSB0aGUgaW5kZXggd2l0aCB0aGUgbmV4dEluZGV4IG9ubHkgaWZcblx0ICAgICAgICAgKiB0aGUgb2Zmc2V0IG9mIHRoZSBuZXh0SW5kZXggaXMgaW4gdGhlIHJhbmdlIG9mIHRoZSBtYXhPZmZzZXRcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBpZiAoc2xpZGVzW25leHRJbmRleF0ub2Zmc2V0TGVmdCA8PSBtYXhPZmZzZXQpIHtcblx0ICAgICAgICAgICAgaW5kZXggPSBuZXh0SW5kZXg7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAoaW5maW5pdGUgJiYgKG5leHRJbmRleCA9PT0gc2xpZGVzLmxlbmd0aCAtIGluZmluaXRlIHx8IG5leHRJbmRleCA9PT0gMCkpIHtcblx0ICAgICAgICAgICAgaWYgKGRpcmVjdGlvbikge1xuXHQgICAgICAgICAgICAgICAgaW5kZXggPSBpbmZpbml0ZTtcblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgaWYgKCFkaXJlY3Rpb24pIHtcblx0ICAgICAgICAgICAgICAgIGluZGV4ID0gc2xpZGVzLmxlbmd0aCAtIGluZmluaXRlICogMjtcblx0ICAgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgICAgcG9zaXRpb24ueCA9IHNsaWRlc1tpbmRleF0ub2Zmc2V0TGVmdCAqIC0xO1xuXHRcblx0ICAgICAgICAgICAgdHJhbnNpdGlvbkVuZENhbGxiYWNrID0gZnVuY3Rpb24gdHJhbnNpdGlvbkVuZENhbGxiYWNrKCkge1xuXHQgICAgICAgICAgICAgICAgdHJhbnNsYXRlKHNsaWRlc1tpbmRleF0ub2Zmc2V0TGVmdCAqIC0xLCAwLCB1bmRlZmluZWQpO1xuXHQgICAgICAgICAgICB9O1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKGNsYXNzTmFtZUFjdGl2ZVNsaWRlKSB7XG5cdCAgICAgICAgICAgIHNldEFjdGl2ZUVsZW1lbnQoc2xpY2UuY2FsbChzbGlkZXMpLCBpbmRleCk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBkaXNwYXRjaFNsaWRlckV2ZW50KCdhZnRlcicsICdzbGlkZScsIHtcblx0ICAgICAgICAgICAgY3VycmVudFNsaWRlOiBpbmRleFxuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogcHVibGljXG5cdCAgICAgKiBzZXR1cCBmdW5jdGlvblxuXHQgICAgICovXG5cdCAgICBmdW5jdGlvbiBzZXR1cCgpIHtcblx0ICAgICAgICBkaXNwYXRjaFNsaWRlckV2ZW50KCdiZWZvcmUnLCAnaW5pdCcpO1xuXHRcblx0ICAgICAgICBwcmVmaXhlcyA9ICgwLCBfZGV0ZWN0UHJlZml4ZXMyLmRlZmF1bHQpKCk7XG5cdCAgICAgICAgb3B0aW9ucyA9IF9leHRlbmRzKHt9LCBfZGVmYXVsdHMyLmRlZmF1bHQsIG9wdHMpO1xuXHRcblx0ICAgICAgICB2YXIgX29wdGlvbnM0ID0gb3B0aW9ucztcblx0ICAgICAgICB2YXIgY2xhc3NOYW1lRnJhbWUgPSBfb3B0aW9uczQuY2xhc3NOYW1lRnJhbWU7XG5cdCAgICAgICAgdmFyIGNsYXNzTmFtZVNsaWRlQ29udGFpbmVyID0gX29wdGlvbnM0LmNsYXNzTmFtZVNsaWRlQ29udGFpbmVyO1xuXHQgICAgICAgIHZhciBjbGFzc05hbWVQcmV2Q3RybCA9IF9vcHRpb25zNC5jbGFzc05hbWVQcmV2Q3RybDtcblx0ICAgICAgICB2YXIgY2xhc3NOYW1lTmV4dEN0cmwgPSBfb3B0aW9uczQuY2xhc3NOYW1lTmV4dEN0cmw7XG5cdCAgICAgICAgdmFyIGVuYWJsZU1vdXNlRXZlbnRzID0gX29wdGlvbnM0LmVuYWJsZU1vdXNlRXZlbnRzO1xuXHQgICAgICAgIHZhciBjbGFzc05hbWVBY3RpdmVTbGlkZSA9IF9vcHRpb25zNC5jbGFzc05hbWVBY3RpdmVTbGlkZTtcblx0XG5cdFxuXHQgICAgICAgIGZyYW1lID0gc2xpZGVyLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoY2xhc3NOYW1lRnJhbWUpWzBdO1xuXHQgICAgICAgIHNsaWRlQ29udGFpbmVyID0gZnJhbWUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShjbGFzc05hbWVTbGlkZUNvbnRhaW5lcilbMF07XG5cdCAgICAgICAgcHJldkN0cmwgPSBzbGlkZXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShjbGFzc05hbWVQcmV2Q3RybClbMF07XG5cdCAgICAgICAgbmV4dEN0cmwgPSBzbGlkZXIuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShjbGFzc05hbWVOZXh0Q3RybClbMF07XG5cdFxuXHQgICAgICAgIHBvc2l0aW9uID0ge1xuXHQgICAgICAgICAgICB4OiBzbGlkZUNvbnRhaW5lci5vZmZzZXRMZWZ0LFxuXHQgICAgICAgICAgICB5OiBzbGlkZUNvbnRhaW5lci5vZmZzZXRUb3Bcblx0ICAgICAgICB9O1xuXHRcblx0ICAgICAgICBpZiAob3B0aW9ucy5pbmZpbml0ZSkge1xuXHQgICAgICAgICAgICBzbGlkZXMgPSBzZXR1cEluZmluaXRlKHNsaWNlLmNhbGwoc2xpZGVDb250YWluZXIuY2hpbGRyZW4pKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBzbGlkZXMgPSBzbGljZS5jYWxsKHNsaWRlQ29udGFpbmVyLmNoaWxkcmVuKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHJlc2V0KCk7XG5cdFxuXHQgICAgICAgIGlmIChjbGFzc05hbWVBY3RpdmVTbGlkZSkge1xuXHQgICAgICAgICAgICBzZXRBY3RpdmVFbGVtZW50KHNsaWRlcywgaW5kZXgpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKHByZXZDdHJsICYmIG5leHRDdHJsKSB7XG5cdCAgICAgICAgICAgIHByZXZDdHJsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcHJldik7XG5cdCAgICAgICAgICAgIG5leHRDdHJsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgbmV4dCk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBmcmFtZS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0Jywgb25Ub3VjaHN0YXJ0KTtcblx0XG5cdCAgICAgICAgaWYgKGVuYWJsZU1vdXNlRXZlbnRzKSB7XG5cdCAgICAgICAgICAgIGZyYW1lLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9uVG91Y2hzdGFydCk7XG5cdCAgICAgICAgICAgIGZyYW1lLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb25DbGljayk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBvcHRpb25zLndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvblJlc2l6ZSk7XG5cdFxuXHQgICAgICAgIGRpc3BhdGNoU2xpZGVyRXZlbnQoJ2FmdGVyJywgJ2luaXQnKTtcblx0ICAgIH1cblx0XG5cdCAgICAvKipcblx0ICAgICAqIHB1YmxpY1xuXHQgICAgICogcmVzZXQgZnVuY3Rpb246IGNhbGxlZCBvbiByZXNpemVcblx0ICAgICAqL1xuXHQgICAgZnVuY3Rpb24gcmVzZXQoKSB7XG5cdCAgICAgICAgdmFyIF9vcHRpb25zNSA9IG9wdGlvbnM7XG5cdCAgICAgICAgdmFyIGluZmluaXRlID0gX29wdGlvbnM1LmluZmluaXRlO1xuXHQgICAgICAgIHZhciBlYXNlID0gX29wdGlvbnM1LmVhc2U7XG5cdCAgICAgICAgdmFyIHJld2luZFNwZWVkID0gX29wdGlvbnM1LnJld2luZFNwZWVkO1xuXHQgICAgICAgIHZhciByZXdpbmRPblJlc2l6ZSA9IF9vcHRpb25zNS5yZXdpbmRPblJlc2l6ZTtcblx0ICAgICAgICB2YXIgY2xhc3NOYW1lQWN0aXZlU2xpZGUgPSBfb3B0aW9uczUuY2xhc3NOYW1lQWN0aXZlU2xpZGU7XG5cdFxuXHRcblx0ICAgICAgICBzbGlkZXNXaWR0aCA9IHNsaWRlQ29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLndpZHRoIHx8IHNsaWRlQ29udGFpbmVyLm9mZnNldFdpZHRoO1xuXHQgICAgICAgIGZyYW1lV2lkdGggPSBmcmFtZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aCB8fCBmcmFtZS5vZmZzZXRXaWR0aDtcblx0XG5cdCAgICAgICAgaWYgKGZyYW1lV2lkdGggPT09IHNsaWRlc1dpZHRoKSB7XG5cdCAgICAgICAgICAgIHNsaWRlc1dpZHRoID0gc2xpZGVzLnJlZHVjZShmdW5jdGlvbiAocHJldmlvdXNWYWx1ZSwgc2xpZGUpIHtcblx0ICAgICAgICAgICAgICAgIHJldHVybiBwcmV2aW91c1ZhbHVlICsgc2xpZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggfHwgc2xpZGUub2Zmc2V0V2lkdGg7XG5cdCAgICAgICAgICAgIH0sIDApO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKHJld2luZE9uUmVzaXplKSB7XG5cdCAgICAgICAgICAgIGluZGV4ID0gMDtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBlYXNlID0gbnVsbDtcblx0ICAgICAgICAgICAgcmV3aW5kU3BlZWQgPSAwO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKGluZmluaXRlKSB7XG5cdCAgICAgICAgICAgIHRyYW5zbGF0ZShzbGlkZXNbaW5kZXggKyBpbmZpbml0ZV0ub2Zmc2V0TGVmdCAqIC0xLCAwLCBudWxsKTtcblx0XG5cdCAgICAgICAgICAgIGluZGV4ID0gaW5kZXggKyBpbmZpbml0ZTtcblx0ICAgICAgICAgICAgcG9zaXRpb24ueCA9IHNsaWRlc1tpbmRleF0ub2Zmc2V0TGVmdCAqIC0xO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHRyYW5zbGF0ZShzbGlkZXNbaW5kZXhdLm9mZnNldExlZnQgKiAtMSwgcmV3aW5kU3BlZWQsIGVhc2UpO1xuXHQgICAgICAgICAgICBwb3NpdGlvbi54ID0gc2xpZGVzW2luZGV4XS5vZmZzZXRMZWZ0ICogLTE7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAoY2xhc3NOYW1lQWN0aXZlU2xpZGUpIHtcblx0ICAgICAgICAgICAgc2V0QWN0aXZlRWxlbWVudChzbGljZS5jYWxsKHNsaWRlcyksIGluZGV4KTtcblx0ICAgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgLyoqXG5cdCAgICAgKiBwdWJsaWNcblx0ICAgICAqIHNsaWRlVG86IGNhbGxlZCBvbiBjbGlja2hhbmRsZXJcblx0ICAgICAqL1xuXHQgICAgZnVuY3Rpb24gc2xpZGVUbyhpbmRleCkge1xuXHQgICAgICAgIHNsaWRlKGluZGV4KTtcblx0ICAgIH1cblx0XG5cdCAgICAvKipcblx0ICAgICAqIHB1YmxpY1xuXHQgICAgICogcmV0dXJuSW5kZXggZnVuY3Rpb246IGNhbGxlZCBvbiBjbGlja2hhbmRsZXJcblx0ICAgICAqL1xuXHQgICAgZnVuY3Rpb24gcmV0dXJuSW5kZXgoKSB7XG5cdCAgICAgICAgcmV0dXJuIGluZGV4IC0gb3B0aW9ucy5pbmZpbml0ZSB8fCAwO1xuXHQgICAgfVxuXHRcblx0ICAgIC8qKlxuXHQgICAgICogcHVibGljXG5cdCAgICAgKiBwcmV2IGZ1bmN0aW9uOiBjYWxsZWQgb24gY2xpY2toYW5kbGVyXG5cdCAgICAgKi9cblx0ICAgIGZ1bmN0aW9uIHByZXYoKSB7XG5cdCAgICAgICAgc2xpZGUoZmFsc2UsIGZhbHNlKTtcblx0ICAgIH1cblx0XG5cdCAgICAvKipcblx0ICAgICAqIHB1YmxpY1xuXHQgICAgICogbmV4dCBmdW5jdGlvbjogY2FsbGVkIG9uIGNsaWNraGFuZGxlclxuXHQgICAgICovXG5cdCAgICBmdW5jdGlvbiBuZXh0KCkge1xuXHQgICAgICAgIHNsaWRlKGZhbHNlLCB0cnVlKTtcblx0ICAgIH1cblx0XG5cdCAgICAvKipcblx0ICAgICAqIHB1YmxpY1xuXHQgICAgICogZGVzdHJveSBmdW5jdGlvbjogY2FsbGVkIHRvIGdyYWNlZnVsbHkgZGVzdHJveSB0aGUgbG9yeSBpbnN0YW5jZVxuXHQgICAgICovXG5cdCAgICBmdW5jdGlvbiBkZXN0cm95KCkge1xuXHQgICAgICAgIGRpc3BhdGNoU2xpZGVyRXZlbnQoJ2JlZm9yZScsICdkZXN0cm95Jyk7XG5cdFxuXHQgICAgICAgIC8vIHJlbW92ZSBldmVudCBsaXN0ZW5lcnNcblx0ICAgICAgICBmcmFtZS5yZW1vdmVFdmVudExpc3RlbmVyKHByZWZpeGVzLnRyYW5zaXRpb25FbmQsIG9uVHJhbnNpdGlvbkVuZCk7XG5cdCAgICAgICAgZnJhbWUucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uVG91Y2hzdGFydCk7XG5cdCAgICAgICAgZnJhbWUucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2htb3ZlJywgb25Ub3VjaG1vdmUpO1xuXHQgICAgICAgIGZyYW1lLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgb25Ub3VjaGVuZCk7XG5cdCAgICAgICAgZnJhbWUucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgb25Ub3VjaG1vdmUpO1xuXHQgICAgICAgIGZyYW1lLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIG9uVG91Y2hzdGFydCk7XG5cdCAgICAgICAgZnJhbWUucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9uVG91Y2hlbmQpO1xuXHQgICAgICAgIGZyYW1lLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBvblRvdWNoZW5kKTtcblx0ICAgICAgICBmcmFtZS5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIG9uQ2xpY2spO1xuXHRcblx0ICAgICAgICBvcHRpb25zLndpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCdyZXNpemUnLCBvblJlc2l6ZSk7XG5cdFxuXHQgICAgICAgIGlmIChwcmV2Q3RybCkge1xuXHQgICAgICAgICAgICBwcmV2Q3RybC5yZW1vdmVFdmVudExpc3RlbmVyKCdjbGljaycsIHByZXYpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKG5leHRDdHJsKSB7XG5cdCAgICAgICAgICAgIG5leHRDdHJsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgbmV4dCk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICAvLyByZW1vdmUgY2xvbmVkIHNsaWRlcyBpZiBpbmZpbml0ZSBpcyBzZXRcblx0ICAgICAgICBpZiAob3B0aW9ucy5pbmZpbml0ZSkge1xuXHQgICAgICAgICAgICBBcnJheS5hcHBseShudWxsLCBBcnJheShvcHRpb25zLmluZmluaXRlKSkuZm9yRWFjaChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICAgICAgICBzbGlkZUNvbnRhaW5lci5yZW1vdmVDaGlsZChzbGlkZUNvbnRhaW5lci5maXJzdENoaWxkKTtcblx0ICAgICAgICAgICAgICAgIHNsaWRlQ29udGFpbmVyLnJlbW92ZUNoaWxkKHNsaWRlQ29udGFpbmVyLmxhc3RDaGlsZCk7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgZGlzcGF0Y2hTbGlkZXJFdmVudCgnYWZ0ZXInLCAnZGVzdHJveScpO1xuXHQgICAgfVxuXHRcblx0ICAgIC8vIGV2ZW50IGhhbmRsaW5nXG5cdFxuXHQgICAgdmFyIHRvdWNoT2Zmc2V0ID0gdm9pZCAwO1xuXHQgICAgdmFyIGRlbHRhID0gdm9pZCAwO1xuXHQgICAgdmFyIGlzU2Nyb2xsaW5nID0gdm9pZCAwO1xuXHRcblx0ICAgIGZ1bmN0aW9uIG9uVHJhbnNpdGlvbkVuZCgpIHtcblx0ICAgICAgICBpZiAodHJhbnNpdGlvbkVuZENhbGxiYWNrKSB7XG5cdCAgICAgICAgICAgIHRyYW5zaXRpb25FbmRDYWxsYmFjaygpO1xuXHRcblx0ICAgICAgICAgICAgdHJhbnNpdGlvbkVuZENhbGxiYWNrID0gdW5kZWZpbmVkO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICBmdW5jdGlvbiBvblRvdWNoc3RhcnQoZXZlbnQpIHtcblx0ICAgICAgICB2YXIgX29wdGlvbnM2ID0gb3B0aW9ucztcblx0ICAgICAgICB2YXIgZW5hYmxlTW91c2VFdmVudHMgPSBfb3B0aW9uczYuZW5hYmxlTW91c2VFdmVudHM7XG5cdFxuXHQgICAgICAgIHZhciB0b3VjaGVzID0gZXZlbnQudG91Y2hlcyA/IGV2ZW50LnRvdWNoZXNbMF0gOiBldmVudDtcblx0XG5cdCAgICAgICAgaWYgKGVuYWJsZU1vdXNlRXZlbnRzKSB7XG5cdCAgICAgICAgICAgIGZyYW1lLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIG9uVG91Y2htb3ZlKTtcblx0ICAgICAgICAgICAgZnJhbWUuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9uVG91Y2hlbmQpO1xuXHQgICAgICAgICAgICBmcmFtZS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgb25Ub3VjaGVuZCk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBmcmFtZS5hZGRFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvblRvdWNobW92ZSk7XG5cdCAgICAgICAgZnJhbWUuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBvblRvdWNoZW5kKTtcblx0XG5cdCAgICAgICAgdmFyIHBhZ2VYID0gdG91Y2hlcy5wYWdlWDtcblx0ICAgICAgICB2YXIgcGFnZVkgPSB0b3VjaGVzLnBhZ2VZO1xuXHRcblx0XG5cdCAgICAgICAgdG91Y2hPZmZzZXQgPSB7XG5cdCAgICAgICAgICAgIHg6IHBhZ2VYLFxuXHQgICAgICAgICAgICB5OiBwYWdlWSxcblx0ICAgICAgICAgICAgdGltZTogRGF0ZS5ub3coKVxuXHQgICAgICAgIH07XG5cdFxuXHQgICAgICAgIGlzU2Nyb2xsaW5nID0gdW5kZWZpbmVkO1xuXHRcblx0ICAgICAgICBkZWx0YSA9IHt9O1xuXHRcblx0ICAgICAgICBkaXNwYXRjaFNsaWRlckV2ZW50KCdvbicsICd0b3VjaHN0YXJ0Jywge1xuXHQgICAgICAgICAgICBldmVudDogZXZlbnRcblx0ICAgICAgICB9KTtcblx0ICAgIH1cblx0XG5cdCAgICBmdW5jdGlvbiBvblRvdWNobW92ZShldmVudCkge1xuXHQgICAgICAgIHZhciB0b3VjaGVzID0gZXZlbnQudG91Y2hlcyA/IGV2ZW50LnRvdWNoZXNbMF0gOiBldmVudDtcblx0ICAgICAgICB2YXIgcGFnZVggPSB0b3VjaGVzLnBhZ2VYO1xuXHQgICAgICAgIHZhciBwYWdlWSA9IHRvdWNoZXMucGFnZVk7XG5cdFxuXHRcblx0ICAgICAgICBkZWx0YSA9IHtcblx0ICAgICAgICAgICAgeDogcGFnZVggLSB0b3VjaE9mZnNldC54LFxuXHQgICAgICAgICAgICB5OiBwYWdlWSAtIHRvdWNoT2Zmc2V0Lnlcblx0ICAgICAgICB9O1xuXHRcblx0ICAgICAgICBpZiAodHlwZW9mIGlzU2Nyb2xsaW5nID09PSAndW5kZWZpbmVkJykge1xuXHQgICAgICAgICAgICBpc1Njcm9sbGluZyA9ICEhKGlzU2Nyb2xsaW5nIHx8IE1hdGguYWJzKGRlbHRhLngpIDwgTWF0aC5hYnMoZGVsdGEueSkpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKCFpc1Njcm9sbGluZyAmJiB0b3VjaE9mZnNldCkge1xuXHQgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgICAgICAgICB0cmFuc2xhdGUocG9zaXRpb24ueCArIGRlbHRhLngsIDAsIG51bGwpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgLy8gbWF5IGJlXG5cdCAgICAgICAgZGlzcGF0Y2hTbGlkZXJFdmVudCgnb24nLCAndG91Y2htb3ZlJywge1xuXHQgICAgICAgICAgICBldmVudDogZXZlbnRcblx0ICAgICAgICB9KTtcblx0ICAgIH1cblx0XG5cdCAgICBmdW5jdGlvbiBvblRvdWNoZW5kKGV2ZW50KSB7XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogdGltZSBiZXR3ZWVuIHRvdWNoc3RhcnQgYW5kIHRvdWNoZW5kIGluIG1pbGxpc2Vjb25kc1xuXHQgICAgICAgICAqIEBkdXJhdGlvbiB7bnVtYmVyfVxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHZhciBkdXJhdGlvbiA9IHRvdWNoT2Zmc2V0ID8gRGF0ZS5ub3coKSAtIHRvdWNoT2Zmc2V0LnRpbWUgOiB1bmRlZmluZWQ7XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIGlzIHZhbGlkIGlmOlxuXHQgICAgICAgICAqXG5cdCAgICAgICAgICogLT4gc3dpcGUgYXR0ZW1wdCB0aW1lIGlzIG92ZXIgMzAwIG1zXG5cdCAgICAgICAgICogYW5kXG5cdCAgICAgICAgICogLT4gc3dpcGUgZGlzdGFuY2UgaXMgZ3JlYXRlciB0aGFuIDI1cHhcblx0ICAgICAgICAgKiBvclxuXHQgICAgICAgICAqIC0+IHN3aXBlIGRpc3RhbmNlIGlzIG1vcmUgdGhlbiBhIHRoaXJkIG9mIHRoZSBzd2lwZSBhcmVhXG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiBAaXNWYWxpZFNsaWRlIHtCb29sZWFufVxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHZhciBpc1ZhbGlkID0gTnVtYmVyKGR1cmF0aW9uKSA8IDMwMCAmJiBNYXRoLmFicyhkZWx0YS54KSA+IDI1IHx8IE1hdGguYWJzKGRlbHRhLngpID4gZnJhbWVXaWR0aCAvIDM7XG5cdFxuXHQgICAgICAgIC8qKlxuXHQgICAgICAgICAqIGlzIG91dCBvZiBib3VuZHMgaWY6XG5cdCAgICAgICAgICpcblx0ICAgICAgICAgKiAtPiBpbmRleCBpcyAwIGFuZCBkZWx0YSB4IGlzIGdyZWF0ZXIgdGhhbiAwXG5cdCAgICAgICAgICogb3Jcblx0ICAgICAgICAgKiAtPiBpbmRleCBpcyB0aGUgbGFzdCBzbGlkZSBhbmQgZGVsdGEgaXMgc21hbGxlciB0aGFuIDBcblx0ICAgICAgICAgKlxuXHQgICAgICAgICAqIEBpc091dE9mQm91bmRzIHtCb29sZWFufVxuXHQgICAgICAgICAqL1xuXHQgICAgICAgIHZhciBpc091dE9mQm91bmRzID0gIWluZGV4ICYmIGRlbHRhLnggPiAwIHx8IGluZGV4ID09PSBzbGlkZXMubGVuZ3RoIC0gMSAmJiBkZWx0YS54IDwgMDtcblx0XG5cdCAgICAgICAgdmFyIGRpcmVjdGlvbiA9IGRlbHRhLnggPCAwO1xuXHRcblx0ICAgICAgICBpZiAoIWlzU2Nyb2xsaW5nKSB7XG5cdCAgICAgICAgICAgIGlmIChpc1ZhbGlkICYmICFpc091dE9mQm91bmRzKSB7XG5cdCAgICAgICAgICAgICAgICBzbGlkZShmYWxzZSwgZGlyZWN0aW9uKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICAgIHRyYW5zbGF0ZShwb3NpdGlvbi54LCBvcHRpb25zLnNuYXBCYWNrU3BlZWQpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICB0b3VjaE9mZnNldCA9IHVuZGVmaW5lZDtcblx0XG5cdCAgICAgICAgLyoqXG5cdCAgICAgICAgICogcmVtb3ZlIGV2ZW50bGlzdGVuZXJzIGFmdGVyIHN3aXBlIGF0dGVtcHRcblx0ICAgICAgICAgKi9cblx0ICAgICAgICBmcmFtZS5yZW1vdmVFdmVudExpc3RlbmVyKCd0b3VjaG1vdmUnLCBvblRvdWNobW92ZSk7XG5cdCAgICAgICAgZnJhbWUucmVtb3ZlRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCBvblRvdWNoZW5kKTtcblx0ICAgICAgICBmcmFtZS5yZW1vdmVFdmVudExpc3RlbmVyKCdtb3VzZW1vdmUnLCBvblRvdWNobW92ZSk7XG5cdCAgICAgICAgZnJhbWUucmVtb3ZlRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9uVG91Y2hlbmQpO1xuXHQgICAgICAgIGZyYW1lLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCBvblRvdWNoZW5kKTtcblx0XG5cdCAgICAgICAgZGlzcGF0Y2hTbGlkZXJFdmVudCgnb24nLCAndG91Y2hlbmQnLCB7XG5cdCAgICAgICAgICAgIGV2ZW50OiBldmVudFxuXHQgICAgICAgIH0pO1xuXHQgICAgfVxuXHRcblx0ICAgIGZ1bmN0aW9uIG9uQ2xpY2soZXZlbnQpIHtcblx0ICAgICAgICBpZiAoZGVsdGEueCkge1xuXHQgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICBmdW5jdGlvbiBvblJlc2l6ZShldmVudCkge1xuXHQgICAgICAgIHJlc2V0KCk7XG5cdFxuXHQgICAgICAgIGRpc3BhdGNoU2xpZGVyRXZlbnQoJ29uJywgJ3Jlc2l6ZScsIHtcblx0ICAgICAgICAgICAgZXZlbnQ6IGV2ZW50XG5cdCAgICAgICAgfSk7XG5cdCAgICB9XG5cdFxuXHQgICAgLy8gdHJpZ2dlciBpbml0aWFsIHNldHVwXG5cdCAgICBzZXR1cCgpO1xuXHRcblx0ICAgIC8vIGV4cG9zZSBwdWJsaWMgYXBpXG5cdCAgICByZXR1cm4ge1xuXHQgICAgICAgIHNldHVwOiBzZXR1cCxcblx0ICAgICAgICByZXNldDogcmVzZXQsXG5cdCAgICAgICAgc2xpZGVUbzogc2xpZGVUbyxcblx0ICAgICAgICByZXR1cm5JbmRleDogcmV0dXJuSW5kZXgsXG5cdCAgICAgICAgcHJldjogcHJldixcblx0ICAgICAgICBuZXh0OiBuZXh0LFxuXHQgICAgICAgIGRlc3Ryb3k6IGRlc3Ryb3lcblx0ICAgIH07XG5cdH1cblxuLyoqKi8gfSxcbi8qIDIgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihnbG9iYWwpIHsndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICAgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmRlZmF1bHQgPSBkZXRlY3RQcmVmaXhlcztcblx0LyoqXG5cdCAqIERldGVjdGluZyBwcmVmaXhlcyBmb3Igc2F2aW5nIHRpbWUgYW5kIGJ5dGVzXG5cdCAqL1xuXHRmdW5jdGlvbiBkZXRlY3RQcmVmaXhlcygpIHtcblx0ICAgIHZhciB0cmFuc2Zvcm0gPSB2b2lkIDA7XG5cdCAgICB2YXIgdHJhbnNpdGlvbiA9IHZvaWQgMDtcblx0ICAgIHZhciB0cmFuc2l0aW9uRW5kID0gdm9pZCAwO1xuXHQgICAgdmFyIGhhc1RyYW5zbGF0ZTNkID0gdm9pZCAwO1xuXHRcblx0ICAgIChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgdmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnXycpO1xuXHQgICAgICAgIHZhciBzdHlsZSA9IGVsLnN0eWxlO1xuXHRcblx0ICAgICAgICB2YXIgcHJvcCA9IHZvaWQgMDtcblx0XG5cdCAgICAgICAgaWYgKHN0eWxlW3Byb3AgPSAnd2Via2l0VHJhbnNpdGlvbiddID09PSAnJykge1xuXHQgICAgICAgICAgICB0cmFuc2l0aW9uRW5kID0gJ3dlYmtpdFRyYW5zaXRpb25FbmQnO1xuXHQgICAgICAgICAgICB0cmFuc2l0aW9uID0gcHJvcDtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGlmIChzdHlsZVtwcm9wID0gJ3RyYW5zaXRpb24nXSA9PT0gJycpIHtcblx0ICAgICAgICAgICAgdHJhbnNpdGlvbkVuZCA9ICd0cmFuc2l0aW9uZW5kJztcblx0ICAgICAgICAgICAgdHJhbnNpdGlvbiA9IHByb3A7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAoc3R5bGVbcHJvcCA9ICd3ZWJraXRUcmFuc2Zvcm0nXSA9PT0gJycpIHtcblx0ICAgICAgICAgICAgdHJhbnNmb3JtID0gcHJvcDtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGlmIChzdHlsZVtwcm9wID0gJ21zVHJhbnNmb3JtJ10gPT09ICcnKSB7XG5cdCAgICAgICAgICAgIHRyYW5zZm9ybSA9IHByb3A7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBpZiAoc3R5bGVbcHJvcCA9ICd0cmFuc2Zvcm0nXSA9PT0gJycpIHtcblx0ICAgICAgICAgICAgdHJhbnNmb3JtID0gcHJvcDtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGRvY3VtZW50LmJvZHkuaW5zZXJ0QmVmb3JlKGVsLCBudWxsKTtcblx0ICAgICAgICBzdHlsZVt0cmFuc2Zvcm1dID0gJ3RyYW5zbGF0ZTNkKDAsIDAsIDApJztcblx0ICAgICAgICBoYXNUcmFuc2xhdGUzZCA9ICEhZ2xvYmFsLmdldENvbXB1dGVkU3R5bGUoZWwpLmdldFByb3BlcnR5VmFsdWUodHJhbnNmb3JtKTtcblx0ICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGVsKTtcblx0ICAgIH0pKCk7XG5cdFxuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgICB0cmFuc2Zvcm06IHRyYW5zZm9ybSxcblx0ICAgICAgICB0cmFuc2l0aW9uOiB0cmFuc2l0aW9uLFxuXHQgICAgICAgIHRyYW5zaXRpb25FbmQ6IHRyYW5zaXRpb25FbmQsXG5cdCAgICAgICAgaGFzVHJhbnNsYXRlM2Q6IGhhc1RyYW5zbGF0ZTNkXG5cdCAgICB9O1xuXHR9XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KCkpKSlcblxuLyoqKi8gfSxcbi8qIDMgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgICAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuZGVmYXVsdCA9IGRpc3BhdGNoRXZlbnQ7XG5cdFxuXHR2YXIgX2N1c3RvbUV2ZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblx0XG5cdHZhciBfY3VzdG9tRXZlbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3VzdG9tRXZlbnQpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdC8qKlxuXHQgKiBkaXNwYXRjaCBjdXN0b20gZXZlbnRzXG5cdCAqXG5cdCAqIEBwYXJhbSAge2VsZW1lbnR9IGVsICAgICAgICAgc2xpZGVzaG93IGVsZW1lbnRcblx0ICogQHBhcmFtICB7c3RyaW5nfSAgdHlwZSAgICAgICBjdXN0b20gZXZlbnQgbmFtZVxuXHQgKiBAcGFyYW0gIHtvYmplY3R9ICBkZXRhaWwgICAgIGN1c3RvbSBkZXRhaWwgaW5mb3JtYXRpb25cblx0ICovXG5cdGZ1bmN0aW9uIGRpc3BhdGNoRXZlbnQodGFyZ2V0LCB0eXBlLCBkZXRhaWwpIHtcblx0ICAgIHZhciBldmVudCA9IG5ldyBfY3VzdG9tRXZlbnQyLmRlZmF1bHQodHlwZSwge1xuXHQgICAgICAgIGJ1YmJsZXM6IHRydWUsXG5cdCAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZSxcblx0ICAgICAgICBkZXRhaWw6IGRldGFpbFxuXHQgICAgfSk7XG5cdFxuXHQgICAgdGFyZ2V0LmRpc3BhdGNoRXZlbnQoZXZlbnQpO1xuXHR9XG5cbi8qKiovIH0sXG4vKiA0ICovXG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi8oZnVuY3Rpb24oZ2xvYmFsKSB7XG5cdHZhciBOYXRpdmVDdXN0b21FdmVudCA9IGdsb2JhbC5DdXN0b21FdmVudDtcblx0XG5cdGZ1bmN0aW9uIHVzZU5hdGl2ZSAoKSB7XG5cdCAgdHJ5IHtcblx0ICAgIHZhciBwID0gbmV3IE5hdGl2ZUN1c3RvbUV2ZW50KCdjYXQnLCB7IGRldGFpbDogeyBmb286ICdiYXInIH0gfSk7XG5cdCAgICByZXR1cm4gICdjYXQnID09PSBwLnR5cGUgJiYgJ2JhcicgPT09IHAuZGV0YWlsLmZvbztcblx0ICB9IGNhdGNoIChlKSB7XG5cdCAgfVxuXHQgIHJldHVybiBmYWxzZTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIENyb3NzLWJyb3dzZXIgYEN1c3RvbUV2ZW50YCBjb25zdHJ1Y3Rvci5cblx0ICpcblx0ICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0N1c3RvbUV2ZW50LkN1c3RvbUV2ZW50XG5cdCAqXG5cdCAqIEBwdWJsaWNcblx0ICovXG5cdFxuXHRtb2R1bGUuZXhwb3J0cyA9IHVzZU5hdGl2ZSgpID8gTmF0aXZlQ3VzdG9tRXZlbnQgOlxuXHRcblx0Ly8gSUUgPj0gOVxuXHQnZnVuY3Rpb24nID09PSB0eXBlb2YgZG9jdW1lbnQuY3JlYXRlRXZlbnQgPyBmdW5jdGlvbiBDdXN0b21FdmVudCAodHlwZSwgcGFyYW1zKSB7XG5cdCAgdmFyIGUgPSBkb2N1bWVudC5jcmVhdGVFdmVudCgnQ3VzdG9tRXZlbnQnKTtcblx0ICBpZiAocGFyYW1zKSB7XG5cdCAgICBlLmluaXRDdXN0b21FdmVudCh0eXBlLCBwYXJhbXMuYnViYmxlcywgcGFyYW1zLmNhbmNlbGFibGUsIHBhcmFtcy5kZXRhaWwpO1xuXHQgIH0gZWxzZSB7XG5cdCAgICBlLmluaXRDdXN0b21FdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UsIHZvaWQgMCk7XG5cdCAgfVxuXHQgIHJldHVybiBlO1xuXHR9IDpcblx0XG5cdC8vIElFIDw9IDhcblx0ZnVuY3Rpb24gQ3VzdG9tRXZlbnQgKHR5cGUsIHBhcmFtcykge1xuXHQgIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnRPYmplY3QoKTtcblx0ICBlLnR5cGUgPSB0eXBlO1xuXHQgIGlmIChwYXJhbXMpIHtcblx0ICAgIGUuYnViYmxlcyA9IEJvb2xlYW4ocGFyYW1zLmJ1YmJsZXMpO1xuXHQgICAgZS5jYW5jZWxhYmxlID0gQm9vbGVhbihwYXJhbXMuY2FuY2VsYWJsZSk7XG5cdCAgICBlLmRldGFpbCA9IHBhcmFtcy5kZXRhaWw7XG5cdCAgfSBlbHNlIHtcblx0ICAgIGUuYnViYmxlcyA9IGZhbHNlO1xuXHQgICAgZS5jYW5jZWxhYmxlID0gZmFsc2U7XG5cdCAgICBlLmRldGFpbCA9IHZvaWQgMDtcblx0ICB9XG5cdCAgcmV0dXJuIGU7XG5cdH1cblx0XG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqL30uY2FsbChleHBvcnRzLCAoZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KCkpKSlcblxuLyoqKi8gfSxcbi8qIDUgKi9cbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmRlZmF1bHQgPSB7XG5cdCAgLyoqXG5cdCAgICogc2xpZGVzIHNjcm9sbGVkIGF0IG9uY2Vcblx0ICAgKiBAc2xpZGVzVG9TY3JvbGwge051bWJlcn1cblx0ICAgKi9cblx0ICBzbGlkZXNUb1Njcm9sbDogMSxcblx0XG5cdCAgLyoqXG5cdCAgICogdGltZSBpbiBtaWxsaXNlY29uZHMgZm9yIHRoZSBhbmltYXRpb24gb2YgYSB2YWxpZCBzbGlkZSBhdHRlbXB0XG5cdCAgICogQHNsaWRlU3BlZWQge051bWJlcn1cblx0ICAgKi9cblx0ICBzbGlkZVNwZWVkOiAzMDAsXG5cdFxuXHQgIC8qKlxuXHQgICAqIHRpbWUgaW4gbWlsbGlzZWNvbmRzIGZvciB0aGUgYW5pbWF0aW9uIG9mIHRoZSByZXdpbmQgYWZ0ZXIgdGhlIGxhc3Qgc2xpZGVcblx0ICAgKiBAcmV3aW5kU3BlZWQge051bWJlcn1cblx0ICAgKi9cblx0ICByZXdpbmRTcGVlZDogNjAwLFxuXHRcblx0ICAvKipcblx0ICAgKiB0aW1lIGZvciB0aGUgc25hcEJhY2sgb2YgdGhlIHNsaWRlciBpZiB0aGUgc2xpZGUgYXR0ZW1wdCB3YXMgbm90IHZhbGlkXG5cdCAgICogQHNuYXBCYWNrU3BlZWQge051bWJlcn1cblx0ICAgKi9cblx0ICBzbmFwQmFja1NwZWVkOiAyMDAsXG5cdFxuXHQgIC8qKlxuXHQgICAqIEJhc2ljIGVhc2luZyBmdW5jdGlvbnM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2RlL2RvY3MvV2ViL0NTUy90cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvblxuXHQgICAqIGN1YmljIGJlemllciBlYXNpbmcgZnVuY3Rpb25zOiBodHRwOi8vZWFzaW5ncy5uZXQvZGVcblx0ICAgKiBAZWFzZSB7U3RyaW5nfVxuXHQgICAqL1xuXHQgIGVhc2U6ICdlYXNlJyxcblx0XG5cdCAgLyoqXG5cdCAgICogaWYgc2xpZGVyIHJlYWNoZWQgdGhlIGxhc3Qgc2xpZGUsIHdpdGggbmV4dCBjbGljayB0aGUgc2xpZGVyIGdvZXMgYmFjayB0byB0aGUgc3RhcnRpbmRleC5cblx0ICAgKiB1c2UgaW5maW5pdGUgb3IgcmV3aW5kLCBub3QgYm90aFxuXHQgICAqIEByZXdpbmQge0Jvb2xlYW59XG5cdCAgICovXG5cdCAgcmV3aW5kOiBmYWxzZSxcblx0XG5cdCAgLyoqXG5cdCAgICogbnVtYmVyIG9mIHZpc2libGUgc2xpZGVzIG9yIGZhbHNlXG5cdCAgICogdXNlIGluZmluaXRlIG9yIHJld2luZCwgbm90IGJvdGhcblx0ICAgKiBAaW5maW5pdGUge251bWJlcn1cblx0ICAgKi9cblx0ICBpbmZpbml0ZTogZmFsc2UsXG5cdFxuXHQgIC8qKlxuXHQgICAqIGNsYXNzIG5hbWUgZm9yIHNsaWRlciBmcmFtZVxuXHQgICAqIEBjbGFzc05hbWVGcmFtZSB7c3RyaW5nfVxuXHQgICAqL1xuXHQgIGNsYXNzTmFtZUZyYW1lOiAnanNfZnJhbWUnLFxuXHRcblx0ICAvKipcblx0ICAgKiBjbGFzcyBuYW1lIGZvciBzbGlkZXMgY29udGFpbmVyXG5cdCAgICogQGNsYXNzTmFtZVNsaWRlQ29udGFpbmVyIHtzdHJpbmd9XG5cdCAgICovXG5cdCAgY2xhc3NOYW1lU2xpZGVDb250YWluZXI6ICdqc19zbGlkZXMnLFxuXHRcblx0ICAvKipcblx0ICAgKiBjbGFzcyBuYW1lIGZvciBzbGlkZXIgcHJldiBjb250cm9sXG5cdCAgICogQGNsYXNzTmFtZVByZXZDdHJsIHtzdHJpbmd9XG5cdCAgICovXG5cdCAgY2xhc3NOYW1lUHJldkN0cmw6ICdqc19wcmV2Jyxcblx0XG5cdCAgLyoqXG5cdCAgICogY2xhc3MgbmFtZSBmb3Igc2xpZGVyIG5leHQgY29udHJvbFxuXHQgICAqIEBjbGFzc05hbWVOZXh0Q3RybCB7c3RyaW5nfVxuXHQgICAqL1xuXHQgIGNsYXNzTmFtZU5leHRDdHJsOiAnanNfbmV4dCcsXG5cdFxuXHQgIC8qKlxuXHQgICAqIGNsYXNzIG5hbWUgZm9yIGN1cnJlbnQgYWN0aXZlIHNsaWRlXG5cdCAgICogaWYgZW1wdHlTdHJpbmcgdGhlbiBubyBjbGFzcyBpcyBzZXRcblx0ICAgKiBAY2xhc3NOYW1lQWN0aXZlU2xpZGUge3N0cmluZ31cblx0ICAgKi9cblx0ICBjbGFzc05hbWVBY3RpdmVTbGlkZTogJ2FjdGl2ZScsXG5cdFxuXHQgIC8qKlxuXHQgICAqIGVuYWJsZXMgbW91c2UgZXZlbnRzIGZvciBzd2lwaW5nIG9uIGRlc2t0b3AgZGV2aWNlc1xuXHQgICAqIEBlbmFibGVNb3VzZUV2ZW50cyB7Ym9vbGVhbn1cblx0ICAgKi9cblx0ICBlbmFibGVNb3VzZUV2ZW50czogZmFsc2UsXG5cdFxuXHQgIC8qKlxuXHQgICAqIHdpbmRvdyBpbnN0YW5jZVxuXHQgICAqIEB3aW5kb3cge29iamVjdH1cblx0ICAgKi9cblx0ICB3aW5kb3c6IHdpbmRvdyxcblx0XG5cdCAgLyoqXG5cdCAgICogSWYgZmFsc2UsIHNsaWRlcyBsb3J5IHRvIHRoZSBmaXJzdCBzbGlkZSBvbiB3aW5kb3cgcmVzaXplLlxuXHQgICAqIEByZXdpbmRPblJlc2l6ZSB7Ym9vbGVhbn1cblx0ICAgKi9cblx0ICByZXdpbmRPblJlc2l6ZTogdHJ1ZVxuXHR9O1xuXG4vKioqLyB9XG4vKioqKioqLyBdKVxufSk7XG47IiwiZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHtcblx0dmFyIGxvcnlEb20gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuanMtTG9yeScpO1xuXHRpZiAobG9yeURvbSkge1xuXHRcdHZhciBkb3RDb3VudCA9IGxvcnlEb20ucXVlcnlTZWxlY3RvckFsbCgnLmpzLUxvcnktc2xpZGUnKS5sZW5ndGg7XG5cdFx0dmFyIGRvdENvbnRhaW5lciA9IGxvcnlEb20ucXVlcnlTZWxlY3RvcignLmpzLUxvcnktZG90cycpO1xuXHRcdHZhciBkb3RMaXN0SXRlbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2xpJyk7XG5cdFx0ZG90TGlzdEl0ZW0uY2xhc3NMaXN0LmFkZCgnTG9yeS1kb3QnKTtcblxuXHRcdGxvcnlEb20uYWRkRXZlbnRMaXN0ZW5lcignYmVmb3JlLmxvcnkuaW5pdCcsIGhhbmRsZURvdEV2ZW50KTtcblx0XHRsb3J5RG9tLmFkZEV2ZW50TGlzdGVuZXIoJ2FmdGVyLmxvcnkuaW5pdCcsIGhhbmRsZURvdEV2ZW50KTtcblx0XHRsb3J5RG9tLmFkZEV2ZW50TGlzdGVuZXIoJ2FmdGVyLmxvcnkuc2xpZGUnLCBoYW5kbGVEb3RFdmVudCk7XG5cdFx0bG9yeURvbS5hZGRFdmVudExpc3RlbmVyKCdvbi5sb3J5LnJlc2l6ZScsIGhhbmRsZURvdEV2ZW50KTtcblxuXHRcdHZhciBsb3J5SW5zdGFuY2UgPSBsb3J5KGxvcnlEb20sIHtcblx0XHRcdGluZmluaXRlOiAxLFxuXHRcdFx0ZW5hYmxlTW91c2VFdmVudHM6IHRydWUsXG5cdFx0XHRjbGFzc05hbWVGcmFtZTogJ2pzLUxvcnktZnJhbWUnLFxuXHRcdFx0Y2xhc3NOYW1lU2xpZGVDb250YWluZXI6ICdqcy1Mb3J5LXNsaWRlcycsXG5cdFx0XHRjbGFzc05hbWVQcmV2Q3RybDogJ2pzLUxvcnktcHJldicsXG5cdFx0XHRjbGFzc05hbWVOZXh0Q3RybDogJ2pzLUxvcnktbmV4dCdcblx0XHR9KTtcblx0fVxuXG5cblx0ZnVuY3Rpb24gaGFuZGxlRG90RXZlbnQoZSkge1xuXHRcdGlmIChlLnR5cGUgPT09ICdiZWZvcmUubG9yeS5pbml0Jykge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGxlbiA9IGRvdENvdW50OyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0dmFyIGNsb25lID0gZG90TGlzdEl0ZW0uY2xvbmVOb2RlKCk7XG5cdFx0XHRcdGRvdENvbnRhaW5lci5hcHBlbmRDaGlsZChjbG9uZSk7XG5cdFx0XHR9XG5cdFx0XHRkb3RDb250YWluZXIuY2hpbGROb2Rlc1swXS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcblx0XHR9XG5cdFx0aWYgKGUudHlwZSA9PT0gJ2FmdGVyLmxvcnkuaW5pdCcpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwLCBsZW4gPSBkb3RDb3VudDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdGRvdENvbnRhaW5lci5jaGlsZE5vZGVzW2ldLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oZSkge1xuXHRcdFx0XHRcdGxvcnlJbnN0YW5jZS5zbGlkZVRvKEFycmF5LnByb3RvdHlwZS5pbmRleE9mLmNhbGwoZG90Q29udGFpbmVyLmNoaWxkTm9kZXMsIGUudGFyZ2V0KSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRpZiAoZS50eXBlID09PSAnYWZ0ZXIubG9yeS5zbGlkZScpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwLCBsZW4gPSBkb3RDb250YWluZXIuY2hpbGROb2Rlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRkb3RDb250YWluZXIuY2hpbGROb2Rlc1tpXS5jbGFzc0xpc3QucmVtb3ZlKCdhY3RpdmUnKTtcblx0XHRcdH1cblx0XHRcdGRvdENvbnRhaW5lci5jaGlsZE5vZGVzW2UuZGV0YWlsLmN1cnJlbnRTbGlkZSAtIDFdLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScpO1xuXHRcdH1cblx0XHRpZiAoZS50eXBlID09PSAnb24ubG9yeS5yZXNpemUnKSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgbGVuID0gZG90Q29udGFpbmVyLmNoaWxkTm9kZXMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdFx0ZG90Q29udGFpbmVyLmNoaWxkTm9kZXNbaV0uY2xhc3NMaXN0LnJlbW92ZSgnYWN0aXZlJyk7XG5cdFx0XHR9XG5cdFx0XHRkb3RDb250YWluZXIuY2hpbGROb2Rlc1swXS5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcblx0XHR9XG5cdH1cbn0pO1xuIiwic3RpY2tJblBhcmVudCgpO1xuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
